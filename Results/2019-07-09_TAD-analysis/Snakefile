import pandas as pd
import os.path as path
import itertools

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv(
    path.join('..', '..', 'Data', 'External',
              'LowC_Samples_Data_Available.tsv'),
    index_col=False, sep='\t'
)

SAMPLES = ['PCa' + str(i) for i in CONFIG['Sample ID']]
SAMPLE_COMBOS = itertools.combinations(SAMPLES, 2)
SAMPLE_COMBOS_1 = [i for (i, j) in SAMPLE_COMBOS]
SAMPLE_COMBOS_2 = [j for (i, j) in SAMPLE_COMBOS]

TAD_DIR = path.join('..', '2020-01-15_TAD-aggregation', 'resolved-TADs')
COMPARISON_DIR = 'TAD-comparisons'
PLOT_DIR = 'Plots'

CHRS = ['chr' + str(i) for i in list(range(1, 23)) + ['X', 'Y']]
RESOLUTIONS = [40000]
WINDOWS = range(3, 31)

wildcard_constraints:
    sample = 'PCa[0-9]+',
    lane = '[1-4]',
    read = '[1-2]',
    res = '[0-9]+',
    dist = "\d+"

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        path.join(PLOT_DIR, "jaccard.png"),
        path.join(COMPARISON_DIR, "intersection.bedGraph"),
        path.join(COMPARISON_DIR, "intersection.extended-20000bp.bedGraph"),
        path.join("Proximal", "nearest-motif.bed"),
        path.join("Proximal", "nearest-peak.bed"),
        path.join(PLOT_DIR, "boundary-motif-distance.png"),
        path.join(PLOT_DIR, "boundary-motif-distance.stratified.png"),
        path.join(PLOT_DIR, "boundary-peak-distance.png"),
        path.join(PLOT_DIR, "boundary-peak-distance.stratified.png"),
        # expand(
        #     path.join(COMPARISON_DIR, 'w_{w}.{res}bp.similarity.tsv'),
        #     w=WINDOWS, res=RESOLUTIONS
        # ),
        path.join(COMPARISON_DIR, 'comparison-total-counts.tsv'),
        # path.join(PLOT_DIR, 'tad-similarity-counts.png'),


# ==============================================================================
# Rules
# ==============================================================================
rule inter:
    input:
        expand(path.join(
            TAD_DIR, "{sample}.40000bp.aggregated-boundaries.bedGraph"), sample=SAMPLES)
    output:
        path.join(COMPARISON_DIR, "intersection.bedGraph")
    shell:
        "bedtools multiinter -i {input} > {output}"

rule inter_extended:
    input:
        expand(path.join(
            TAD_DIR, "{sample}.40000bp.aggregated-boundaries.extended-{{dist}}bp.bedGraph"), sample=SAMPLES)
    output:
        path.join(COMPARISON_DIR, "intersection.extended-{dist}bp.bedGraph")
    shell:
        "bedtools multiinter -i {input} > {output}"

rule multi_jaccard:
    input:
        expand(path.join(
            TAD_DIR, "{sample}.40000bp.aggregated-boundaries.bedGraph"), sample=SAMPLES)
    output:
        path.join(PLOT_DIR, "jaccard.png")
    shell:
        "jtools multi-jaccard -o {PLOT_DIR}/jaccard {input}"

rule nearby_ctcf_motifs:
    input:
        boundaries = path.join(COMPARISON_DIR, "intersection.bedGraph"),
        sites = path.join("..", "..", "Data", "External",
                          "Aiden_CTCF_Motifs", "ctcf_motifs.hg38.merged.canonical.bed"),
        genome = path.join("..", "..", "Data", "Processed",
                           "2019-06-18_PCa-LowC-sequencing", "hg38.sizes.txt"),
    output:
        path.join("Proximal", "nearest-motif.bed")
    params:
        "-d"
    shell:
        # sort the genome to make sure chromosomes chr[MXY] are in the same order
        "bedtools closest {params} -a {input.boundaries} -b {input.sites} -g <(sort -k1,1 -V -k2,2n {input.genome}) > {output}"

rule nearby_ctcf_peaks:
    input:
        boundaries = path.join(COMPARISON_DIR, "intersection.bedGraph"),
        sites = path.join("..", "..", "Data", "External",
                          "ENCODE_ChIP", "22Rv1_CTCF_Optimal.canonical.sorted.bed"),
        genome = path.join("..", "..", "Data", "Processed",
                           "2019-06-18_PCa-LowC-sequencing", "hg38.sizes.txt"),
    output:
        path.join("Proximal", "nearest-peak.bed")
    params:
        "-d"
    shell:
        # sort the genome to make sure chromosomes chr[MXY] are in the same order
        "bedtools closest {params} -a {input.boundaries} -b {input.sites} -g <(sort -k1,1 -V -k2,2n {input.genome}) > {output}"

rule plot_distances:
    input:
        script = "plot-ctcf-distances.R",
        motifs = path.join("Proximal", "nearest-motif.bed"),
        peaks = path.join("Proximal", "nearest-peak.bed")
    output:
        path.join(PLOT_DIR, "boundary-motif-distance.png"),
        path.join(PLOT_DIR, "boundary-motif-distance.stratified.png"),
        path.join(PLOT_DIR, "boundary-peak-distance.png"),
        path.join(PLOT_DIR, "boundary-peak-distance.stratified.png"),
    shell:
        "Rscript {input.script}"

rule pairwise_overlap:
    input:
        script = 'calc-tad-overlap.sh',
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", '{sample}.{res}bp.w_{w}.domains.bed'),
            w=WINDOWS, sample=SAMPLES, res=RESOLUTIONS
        )
    output:
        expand(
            path.join(COMPARISON_DIR, "intersected", 'w_{w}.{s1}.{s2}.intersected.bed'),
            w=WINDOWS, s1=SAMPLE_COMBOS_1, s2=SAMPLE_COMBOS_2
        )
    shell:
        'sh {input.script}'

rule compare_tads:
    input:
        script = 'calc-tad-overlap-stats.R',
        tads = expand(
            path.join(
                TAD_DIR, '{sample}.{res}bp.aggregated-domains.sorted.bedGraph'),
            w=WINDOWS, sample=SAMPLES, res=RESOLUTIONS
        ),
        ints = expand(
            path.join(COMPARISON_DIR, "intersected", "w_{w}.{s1}.{s2}.intersected.bed"),
            w=WINDOWS, s1=SAMPLE_COMBOS_1, s2=SAMPLE_COMBOS_2
        )
    output:
        path.join(COMPARISON_DIR, 'comparison-total-counts.tsv'),
    shell:
        'Rscript {input.script} -o {output}'

rule plot_comparison:
    input:
        script = "plot-tad-overlap-stats.R",
        path.join(COMPARISON_DIR, 'comparison-total-counts.tsv'),
    output:
        path.join(PLOT_DIR, 'tad-similarity-counts.png'),
    shell:
        "Rscript {input.script}"

rule tad_similarity:
    input:
        script = 'differential-tad-calls.py',
        data = expand(
            path.join(TAD_DIR, '{sample}.{{res}}bp.aggregated-domains.sorted.bedGraph'),
            sample=SAMPLES
        )
    output:
        path.join(COMPARISON_DIR, 'w_{w}.{res}bp.similarity.tsv'),
    params:
        prefix = lambda wildcards: path.join(
            COMPARISON_DIR,
            'w_{}.{}bp.similarity'.format(wildcards.w, wildcards.res))
    shell:
        'python {input.script} -o {params.prefix} {input.data}'
