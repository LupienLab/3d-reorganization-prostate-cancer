# ==============================================================================
# Configuration
# ==============================================================================
import pandas as pd
import os.path as path

CONFIG = pd.read_csv("config.tsv", index_col=False, sep="\t")
CONFIG = CONFIG.loc[CONFIG.Include == "Yes", :]

SAMPLES = CONFIG["SampleID"].tolist()

LOOP_DIR = path.join("..", "..", "Data", "Processed", "2019-06-18_PCa-LowC-sequencing", "Loops")
PROC_DIR = "Loops"
TRACK_DIR = "Tracks"
PLOT_DIR = "Plots"

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
	input:
		path.join(PROC_DIR, "merged-loops.tsv"),
		path.join(PROC_DIR, "merged-loops.sample-counts.tsv"),
		path.join(PROC_DIR, "shared-loops.tsv"),
		path.join(PROC_DIR, "benign-specific-loops.tsv"),
		path.join(PROC_DIR, "tumour-specific-loops.tsv"),
		path.join(PLOT_DIR, "loop-calls.by-sample.pdf"),
		path.join(PLOT_DIR, "loop-calls.by-sample.png"),
		path.join(PLOT_DIR, "loop-calls.by-type.pdf"),
		path.join(PLOT_DIR, "loop-calls.by-type.png"),
		path.join(TRACK_DIR, "shared-loops.bed2ddb"),
		path.join(TRACK_DIR, "benign-specific-loops.bed2ddb"),
		path.join(TRACK_DIR, "tumour-specific-loops.bed2ddb"),
		path.join(PROC_DIR, "loop-saturation.model-estimates.tsv"),
		path.join(PROC_DIR, "loop-saturation.saturation-estimates.tsv"),
		path.join(PROC_DIR, "loop-saturation.bootstraps.tsv"),
		path.join(PROC_DIR, "loop-saturation.bootstrap-summary.tsv"),
		path.join(PLOT_DIR, "loop-saturation.png"),
		expand(
			path.join(PROC_DIR, "{stack}.{loop_type}.obj"),
			stack=["stack", "pile", "condition_pile"],
			loop_type=["shared", "tumour", "benign"],
		),
		path.join(PLOT_DIR, "apa.png"),
		path.join(PLOT_DIR, "apa.by-sample.png"),


# ==============================================================================
# Rules
# ==============================================================================
rule anchors:
	input:
		script = "get-anchors.R",
		data = expand(
			path.join(LOOP_DIR, "{sample}.res_10000bp.loops.tsv"),
			sample=SAMPLES,
		),
	output:
		path.join(PROC_DIR, "merged-loops.tsv"),
		path.join(PROC_DIR, "merged-loops.sample-counts.tsv"),
		path.join(PROC_DIR, "shared-loops.tsv"),
		path.join(PROC_DIR, "benign-specific-loops.tsv"),
		path.join(PROC_DIR, "tumour-specific-loops.tsv"),
		path.join(PLOT_DIR, "loop-calls.by-sample.pdf"),
		path.join(PLOT_DIR, "loop-calls.by-sample.png"),
		path.join(PLOT_DIR, "loop-calls.by-type.pdf"),
		path.join(PLOT_DIR, "loop-calls.by-type.png"),
	shell:
		"Rscript {input.script}"

rule loop_saturation:
	input:
		script = "loop-saturation.R",
		loops = path.join(PROC_DIR, "merged-loops.tsv"),
	output:
		path.join(PROC_DIR, "loop-saturation.model-estimates.tsv"),
		path.join(PROC_DIR, "loop-saturation.saturation-estimates.tsv"),
		path.join(PROC_DIR, "loop-saturation.bootstraps.tsv"),
		path.join(PROC_DIR, "loop-saturation.bootstrap-summary.tsv"),
		path.join(PLOT_DIR, "loop-saturation.png"),
	shell:
		"Rscript {input.script}"

rule clodius_2d:
	input:
		path.join(PROC_DIR, "{loop_type}-loops.tsv"),
	output:
		path.join(TRACK_DIR, "{loop_type}-loops.bed2ddb"),
	params:
		"--assembly hg38 --has-header --chr1-col 1 --from1-col 2 --to1-col 3 --chr2-col 4 --from2-col 5 --to2-col 6"
	shell:
		"clodius aggregate bedpe {params} -o {output} {input}"

rule apa:
	input:
		script = "apa.py",
		shared = path.join(PROC_DIR, "shared-loops.tsv"),
		benign = path.join(PROC_DIR, "benign-specific-loops.tsv"),
		tumour = path.join(PROC_DIR, "tumour-specific-loops.tsv"),
	output:
		path.join(PROC_DIR, "stack.shared.obj"),
		path.join(PROC_DIR, "stack.benign.obj"),
		path.join(PROC_DIR, "stack.tumour.obj"),
		path.join(PROC_DIR, "pile.shared.obj"),
		path.join(PROC_DIR, "pile.benign.obj"),
		path.join(PROC_DIR, "pile.tumour.obj"),
		path.join(PROC_DIR, "condition_pile.shared.obj"),
		path.join(PROC_DIR, "condition_pile.benign.obj"),
		path.join(PROC_DIR, "condition_pile.tumour.obj"),
	shell:
		"python {input.script}"

rule plot_apa:
	input:
		script = "plot-apa.py",
		data = expand(
			path.join(PROC_DIR, "condition_pile.{loop_type}.obj"),
			loop_type=["shared", "benign", "tumour"],
		),
	output:
		path.join(PLOT_DIR, "apa.png"),
	shell:
		"python {input.script}"

rule plot_apa_by_sample:
	input:
		script = "plot-sample-apa.py",
		data = expand(
			path.join(PROC_DIR, "pile.{loop_type}.obj"),
			loop_type=["shared", "benign", "tumour"],
		),
	output:
		path.join(PLOT_DIR, "apa.by-sample.png"),
	shell:
		"python {input.script}"


rule makebins:
	input:
		chrs = "../../Data/Processed/2019-06-18_PCa-LowC-sequencing/hg38.sizes.txt"
	output:
		"hg38.bins.bed"
	shell:
		"cooler makebins -o {output} {input} 10000"