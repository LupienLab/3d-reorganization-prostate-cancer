# ==============================================================================
# Configuration
# ==============================================================================
import pandas as pd
import os.path as path
from os import getcwd

# sample metadata
CONFIG = pd.read_csv(
    "config.tsv",
    index_col=False,
    sep="\t"
)
CONFIG = CONFIG.loc[CONFIG.Include == "Yes", :]

# various output folders
REPORT_DIR = "Reports"
CONTACT_DIR = path.join("..", "2020-08-29_TADs-downsampled", "downsampled-contacts")
TAD_DIR = path.join("..", "2020-08-29_TADs-downsampled", "Aggregated-TADs", "separated-TADs")
TMP_DIR = "TMP"
PLOT_DIR = "Plots"

# variables for controlling file generation
SAMPLES = CONFIG.SampleID.tolist()
PRIMARY_SAMPLES = CONFIG.loc[CONFIG.Source == "Primary", "SampleID"].tolist()
BENIGN_SAMPLES = CONFIG.loc[(CONFIG.Source == "Primary") & (CONFIG.Type == "Benign"), "SampleID"].tolist()
TUMOUR_SAMPLES = CONFIG.loc[(CONFIG.Source == "Primary") & (CONFIG.Type == "Malignant"), "SampleID"].tolist()

COUNT = 300000000
RESOLUTION = 40000
WINDOW = 20

CHRS = ["chr" + str(i) for i in list(range(1, 23)) + ["X"]]

wildcard_constraints:
    w = "\d+",
    chrom = "chr[X]?[0-9]{0,2}",
    res = "\d+"


# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        # path.join("intersected", "consistent-tads.all-benigns.bed"),
        # path.join("intersected", "consistent-tads.all-benigns.tumour-intersections.bed"),
        


# ==============================================================================
# Rules
# ==============================================================================
rule benign_intersect:
    input:
        expand(
            path.join(TAD_DIR, "{sample}.{count}.res_{res}bp.window_{w}.domains.tsv"),
            sample=BENIGN_SAMPLES,
            count=COUNT,
            res=RESOLUTION,
            w=WINDOW,
        ),
    output:
        path.join("intersected", "consistent-tads.all-benigns.bed"),
    run:
        commands = [
            "bedtools intersect -sorted -wa -f 0.9 -r -a <(awk '/domain/ {{print}}' {input[0]})         -b <(awk '/domain/ {{print}}' {input[1]}) > {TMP_DIR}/int2.tsv",
            "bedtools intersect -sorted -wa -f 0.9 -r -a <(awk '/domain/ {{print}}' {TMP_DIR}/int2.tsv) -b <(awk '/domain/ {{print}}' {input[2]}) > {TMP_DIR}/int3.tsv",
            "bedtools intersect -sorted -wa -f 0.9 -r -a <(awk '/domain/ {{print}}' {TMP_DIR}/int3.tsv) -b <(awk '/domain/ {{print}}' {input[3]}) > {TMP_DIR}/int4.tsv",
            "bedtools intersect -sorted -wa -f 0.9 -r -a <(awk '/domain/ {{print}}' {TMP_DIR}/int4.tsv) -b <(awk '/domain/ {{print}}' {input[4]}) > {TMP_DIR}/int5.tsv",
            "cut -f 1-3 {TMP_DIR}/int5.tsv > {output}",
            "rm {TMP_DIR}/int2.tsv {TMP_DIR}/int3.tsv {TMP_DIR}/int4.tsv {TMP_DIR}/int5.tsv",
        ]
        command_str = "; ".join(commands)
        shell(command_str)

rule tumour_intersect:
    input:
        consistent = path.join("intersected", "consistent-tads.all-benigns.bed"),
        tumour = expand(
            path.join(TAD_DIR, "{sample}.{count}.res_{res}bp.window_{w}.domains.tsv"),
            sample=TUMOUR_SAMPLES,
            count=COUNT,
            res=RESOLUTION,
            w=WINDOW,
        ),
    output:
        path.join("intersected", "consistent-tads.all-benigns.tumour-intersections.bed"),
    params:
        proc = "-sorted -wa -wb -sortout -f 0.9 -r",
        names = "-names {}".format(" ".join(TUMOUR_SAMPLES))
    shell:
        "bedtools intersect {params.proc} -a {input.consistent} -b {input.tumour} {params.names} | bedtools merge -i stdin -c 1 -o count > {output}"

rule dump_mat:
    input:
        path.join(CONTACT_DIR, "{sample}.{count}.{res}bp.cool"),
    output:
        path.join(TMP_DIR, "{sample}.{count}.res_{res}bp.contacts.txt")
    shell:
        "cooler dump --join {input} > {output}"

rule multihiccompare:
    input:
        script = "calc-difftl-interactions.2-by-2.R",
        data = expand(
            path.join(TMP_DIR, "{sample}.{count}.res_{res}bp.contacts.txt"),
            sample=PRIMARY_SAMPLES,
            count=COUNT,
            res=RESOLUTION,
        ),
    output:
        path.join("difftl-interactions", "difftl-results.tsv"),
        path.join("difftl-interactions", "sig-loci.bed"),
        path.join("difftl-interactions", "sig-loci-pairs.bedpe"),
        path.join(PLOT_DIR, "fastlo-normalization.png"),
        path.join(PLOT_DIR, "differential-md.png"),
    shell:
        "Rscript {input.script}"

