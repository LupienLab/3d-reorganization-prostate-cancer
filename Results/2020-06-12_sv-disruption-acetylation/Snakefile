# ==============================================================================
# Environment
# ==============================================================================
import os.path as path
import pandas as pd

CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External", "LowC_Samples_Data_Available.tsv"),
    sep="\t",
    header=0
)
SAMPLES = ["PCa" + str(i) for i in CONFIG.loc[CONFIG.Include == "Yes", "Sample ID"]]

ACETYL_DIR = "Acetylation"
GRAPH_DIR = path.join("..", "2020-02-19_chromoplexy", "Graphs")
PLOT_DIR = "Plots"
TAD_DIR = path.join("..", "2020-01-15_TAD-aggregation", "resolved-TADs")
CHIP_DIR = path.join("..", "..", "Data", "Processed", "2019-05-03_PCa-H3K27ac-peaks", "BAMs")

PLOT_EXTS = ["png", "pdf"]
TESTS = pd.read_csv(
    path.join(GRAPH_DIR, "sv-disruption-tests.tsv"),
    sep="\t",
    header=0
)
TEST_IDS = sorted(TESTS.test_ID.tolist())


# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        "dba_all.rds",
        path.join(PLOT_DIR, "T2E", "position.png"),
        path.join(PLOT_DIR, "T2E", "position.ERG.png"),
        path.join(PLOT_DIR, "T2E", "position.TMPRSS2.png"),
        "TAD-induced-regions.bed",
        expand(
            path.join(ACETYL_DIR, "Peaks", "PCa{sampleid}_{type}.induced-region-counts.bed"),
            sampleid=CONFIG.loc[CONFIG.Include == "Yes", "Sample ID"].tolist(),
            type=["input", "H3K27ac"],
        ),
        expand(
            path.join(ACETYL_DIR, "Breakpoints", "PCa{sampleid}_{type}.breakpoint-counts.bed"),
            sampleid=CONFIG.loc[CONFIG.Include == "Yes", "Sample ID"].tolist(),
            type=["input", "H3K27ac"],
        ),
        "sv-disruption-tests.acetylation.tsv",

# ==============================================================================
# Rules
# ==============================================================================
rule t2e_diffbind:
    input:
        script = "t2e-diffbind.R",
        data = "config.tsv"
    output:
        "dba_all.rds",
        path.join(ACETYL_DIR, "T2E", "dba_comp.rds"),
        path.join(ACETYL_DIR, "T2E", "t2e.all.tsv"),
        path.join(ACETYL_DIR, "T2E", "t2e.local.tsv"),
    shell:
        "Rscript {input.script}"

rule plot_t2e_diffbind:
    input:
        script = "plot-t2e-diffbind.R",
        rds = path.join(ACETYL_DIR, "T2E", "dba_comp.rds"),
        all_data = path.join(ACETYL_DIR, "T2E", "t2e.all.tsv"),
        local_data = path.join(ACETYL_DIR, "T2E", "t2e.local.tsv"),
    output:
        path.join(PLOT_DIR, "T2E", "position.png"),
        path.join(PLOT_DIR, "T2E", "position.ERG.png"),
        path.join(PLOT_DIR, "T2E", "position.TMPRSS2.png"),
    shell:
        "Rscript {input.script}"

rule induced_boundaries:
    input:
        script = "create-induced-regions.py",
        bounds = expand(
            path.join(TAD_DIR, "{sample}.40000bp.aggregated-boundaries.tsv"),
            sample=SAMPLES
        ),
    output:
        "TAD-induced-regions.bed",
    shell:
        "python {input.script}"

rule count_chip_breaks:
    input:
        chip = path.join(CHIP_DIR, "Pca{sampleid}_{type}.sorted.dedup.bam"),
        bed = path.join("..", "2020-02-19_chromoplexy", "Graphs", "sv-breakpoints.tsv"),
    output:
        path.join(ACETYL_DIR, "Breakpoints", "PCa{sampleid}_{type}.breakpoint-counts.bed")
    wildcard_constraints:
        sampleid = "\d+",
        type = "(H3K27ac|input)",
    shell:
        # skip header in input.bed
        "bedtools coverage -abam {input.chip} -b <(awk '{{if (NR > 1) print }}' {input.bed}) | sort -k1,1 -V -k2,2n > {output}"

rule count_chip_peaks:
    input:
        chip = path.join(CHIP_DIR, "Pca{sampleid}_{type}.sorted.dedup.bam"),
        bed = path.join("..", "..", "Data", "Processed", "2019-05-03_PCa-H3K27ac-peaks", "Peaks", "catalogue-peaks.bed"),
    output:
        path.join(ACETYL_DIR, "Peaks", "PCa{sampleid}_{type}.induced-region-counts.bed")
    wildcard_constraints:
        sampleid = "\d+",
        type = "(H3K27ac|input)",
    shell:
        "bedtools coverage -abam {input.chip} -b {input.bed} | sort -k1,1 -V -k2,2n > {output}"

rule diffbind:
    input:
        script = "diffbind.R",
        tests = path.join(GRAPH_DIR, "sv-disruption-tests.tsv"),
        tads = path.join("..", "2020-02-19_sv-disruption-TADs", "sv-disruption-tests.TADs.tsv"),
    output:
        expand(
            path.join("Acetylation", "Tests", "test_{testid}.local.tsv"),
            testid = TEST_IDS,
        )
    shell:
        "Rscript {input.script}"
