import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External", "LowC_Samples_Data_Available.tsv"),
    sep="\t"
)

SAMPLES = ["PCa" + str(i) for i in CONFIG["Sample ID"].tolist()]
TAD_DIR = path.join("..", "2020-01-15_TAD-aggregation", "resolved-TADs")
WINDOWS = list(range(3, 31))

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(path.join("Closest", "{sample}.closest-boundaries.bed"), sample=SAMPLES),
        expand(path.join("Closest", "{sample}.distance-dependency.tsv"), sample=SAMPLES),

# ==============================================================================
# Rules
# ==============================================================================
rule gene_closest_boundary:
    input:
        genes = path.join("../../Data/External/GENCODE/gencode.v33.tss.sorted.bed"),
        bounds = path.join(TAD_DIR, "{sample}.40000bp.aggregated-boundaries.bedGraph")
    output:
        path.join("Closest", "{sample}.closest-boundaries.bed")
    params:
        # get distance with up-/down-stream defined by strand of the gene, ignore direct overlaps
        "-D a -io"
    shell:
        # ignore genes in mitochondrial DNA
        "bedtools closest {params} -a <(grep -v \"chrM\" {input.genes}) -b <(awk '{{FS=OFS=\"\t\"}}{{print $1, $2, $2 + 1, $4, $5}}' {input.bounds}) > {output}"

rule map_genes2tads:
    input:
        script = "map-genes-to-parent-tad.R",
        tads = path.join(TAD_DIR, "{sample}.40000bp.aggregated-domains.sorted.bedGraph"),
        boundaries = path.join("Closest", "{sample}.closest-boundaries.bed"),
    output:
        path.join("Closest", "{sample}.distance-dependency.tsv")
    shell:
        "Rscript {input.script} {input.tads} {input.boundaries} -p Closest/{wildcards.sample}"

rule plot_distance_density:
    input:
        script = "plot-distance-distribution.R",
        data = expand(path.join("Closest", "{sample}.distance-dependency.tsv"), sample=SAMPLES)
    output:
        path.join("Plots", "distance-density.png"),
        path.join("Plots", "distance-ecdf.png"),
    shell:
        "Rscript {input.script}"

rule plot_distance_exprs:
    input:
        script = "plot-distance-expression.R",
        near = expand(path.join("Closest", "{sample}.distance-dependency.tsv"), sample=SAMPLES),
        expression = path.join("..", "..", "Data", "External", "CPC-GENE", "CPC-GENE_Chen-2019_RNAseq_rsem_gene_FPKM.13-Low-C-only.tsv")
    output:
        path.join("Plots", "distance-density-by-expression.png"),
    shell:
        "Rscript {input.script}"

rule plot_distance_essentiality:
    input:
        script = "plot-distance-essentiality.R",
        near = expand(path.join("Closest", "{sample}.distance-dependency.tsv"), sample=SAMPLES),
        expression = path.join("..", "..", "Data", "External", "DepMap", "depmap-rnai.tsv")
    output:
        path.join("Plots", "distance-density-by-essentiality.png"),
    shell:
        "Rscript {input.script}"
