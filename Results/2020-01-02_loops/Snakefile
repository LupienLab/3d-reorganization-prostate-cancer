import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv(path.join("..", "..", "Data", "External",
                               "LowC_Samples_Data_Available.tsv"), sep="\t", index_col=False)

SAMPLE_IDS = CONFIG["Sample ID"].tolist()
BAM_DIR = path.join("..", "..", "Data", "Processed",
                    "2019-06-18_PCa-LowC-sequencing", "Aligned")
PEAK_DIR = path.join("..", "..", "Data", "Processed",
                     "2019-05-03_PCa-H3K27ac-peaks", "Peaks")
LOOP_DIR = "Loops"

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join("BEDPE", "PCa{sampleid}.agg.hicup.name-sorted.bedpe"),
            sampleid=SAMPLE_IDS
        ),
        expand(
            path.join("Loops", "PCa{sampleid}", "hic_loops_juicebox.txt"),
            sampleid=SAMPLE_IDS
        ),
        path.join("Plots", "loop-stats.png"),
        expand(
            path.join("Classification", "PCa{sampleid}.{data}.tsv"),
            sampleid=SAMPLE_IDS,
            data=["loops", "peaks"]
        ),
        expand(
            path.join("Plots", "loop-CRE-overlap.{sep}.{stat}.png"),
            sep=["all", "sum"],
            stat=["count", "proportion"]
        ),
        expand(
            path.join("Classification", "all.loops.{sep}.tsv"),
            sep=["all", "sum"]
        )

# ==============================================================================
# Rules
# ==============================================================================
rule bam2bed:
    input:
        path.join(BAM_DIR, "PCa{sampleid}.agg.hicup.name-sorted.bam")
    output:
        path.join("BEDPE", "PCa{sampleid}.agg.hicup.name-sorted.bedpe")
    shell:
        "bedtools bamtobed -bedpe -i {input} > {output}"

rule cloops:
    input:
        path.join("BEDPE", "PCa{sampleid}.agg.hicup.name-sorted.bedpe")
    output:
        path.join(LOOP_DIR, "PCa{sampleid}", "hic_loops_juicebox.txt"),
        path.join(LOOP_DIR, "PCa{sampleid}", "hic_loops_washU.txt"),
        path.join(LOOP_DIR, "PCa{sampleid}", "hic.loop")
    params:
        "-hic -w -j -plot -eps 4000,5000,7500,10000 -minPts 10,20,30"
    conda:
        "cLoops_env.yaml"
    shell:
        "mkdir -p {LOOP_DIR}/PCa{wildcards.sampleid}; pushd {LOOP_DIR}/PCa{wildcards.sampleid}; cLoops -f {input} -o hic {params}; popd;"

rule plot_loop_stats:
    input:
        script = "plot-loop-stats.R",
        data = path.join(LOOP_DIR, "loop-stats.tsv")
    output:
        path.join("Plots", "loop-stats.png")
    shell:
        "Rscript {input.script}"

rule classify:
    input:
        script = "classify-loops.R",
        loops = path.join(LOOP_DIR, "PCa{sampleid}", "hic_loops_juicebox.txt"),
        peaks = path.join(PEAK_DIR, "Pca{sampleid}_peaks.filtered.bedGraph")
    output:
        path.join("Classification", "PCa{sampleid}.loops.tsv"),
        path.join("Classification", "PCa{sampleid}.peaks.tsv")
    shell:
        "Rscript {input.script} {input.loops} {input.peaks} -p Classification/PCa{wildcards.sampleid}"

rule plot_classifications:
    input:
        script = "plot-loop-classifications.R",
        data = expand(path.join(
            "Classification", "PCa{sampleid}.{data}.tsv"), sampleid=SAMPLE_IDS, data=["loops", "peaks"])
    output:
        path.join("Plots", "loop-CRE-overlap.count.png"),
        path.join("Plots", "loop-CRE-overlap.proportion.png"),
        path.join("Classification", "all.loops.tsv"),
    shell:
        "Rscript {input.script}"
