# ==============================================================================
# Configuration
# ==============================================================================
import pandas as pd
import os.path as path

# sample metadata
CONFIG = pd.read_csv("config.tsv", index_col=False, sep="\t")
CONFIG = CONFIG.loc[CONFIG.Include == "Yes", :]

# various output folders
REPORT_DIR = "Reports"
CONTACT_DIR = "downsampled-contacts"
TMP_DIR = "TMP"
TAD_DIR = "TADs"
PLOT_DIR = "Plots"

# variables for controlling file generation
SAMPLES = CONFIG.SampleID.tolist()
COUNTS = [120000000, 200000000, 300000000]
RESOLUTIONS = [40000]
WINDOWS = [40000 * i for i in range(1, 41)]


# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join("Contacts", "{sample}.mcool"),
            sample=SAMPLES,
        ),
        expand(
            path.join(CONTACT_DIR, "{sample}.{count}.{res}bp.cool"),
            sample=SAMPLES,
            count=COUNTS,
            res=RESOLUTIONS,
        ),
        expand(
            path.join(TAD_DIR, "{sample}.{count}.res_{res}bp.window_{w}bp.domains.bed"),
            sample=SAMPLES,
            count=COUNTS,
            w=WINDOWS,
            res=RESOLUTIONS,
        ),
        path.join("Statistics", "tad-distances.tsv"),
        expand(
            path.join(PLOT_DIR, "bp-score.primary.{plot}.{ext}"),
            plot=["tumour", "benign", "tumour-vs-benign", "tumour-vs-benign.stdev"],
            ext=["png", "pdf"],
        ),


# ==============================================================================
# Rules
# ==============================================================================
rule link:
    input:
        "config.tsv",
    output:
        path.join("Contacts", "{sample}.mcool"),
    params:
        src = lambda wildcards: CONFIG.loc[CONFIG.SampleID == wildcards.sample, "Contact_File"].values[0]
    shell:
        "pushd Contacts; ln -s ../{params.src} {wildcards.sample}.mcool; popd"

rule downsample:
    input:
        path.join("Contacts", "{sample}.mcool"),
    output:
        path.join(CONTACT_DIR, "{sample}.{count}.{res}bp.cool"),
    shell:
        "cooltools random-sample -c {wildcards.count} {input}::/resolutions/{wildcards.res} {output}"

rule call_tads:
    input:
        path.join(CONTACT_DIR, "{sample}.{count}.{res}bp.cool"),
    output:
        tad = path.join(TAD_DIR, "{sample}.{count}.res_{res}bp.window_{w}bp.domains.bed"),
        di = path.join(TAD_DIR, "{sample}.{count}.res_{res}bp.window_{w}bp.directionality.bdg"),
        log = path.join("Logs", "{sample}.{count}.res_{res}bp.window_{w}bp.log"),
    shell:
        "domaincaller --uri {input} -O {output.tad} -D {output.di} --logFile {output.log} --window-size {wildcards.w}"

rule bpscore:
    input:
        script = "calc-tad-similarity.py",
        data = expand(
            path.join(TAD_DIR, "{sample}.{count}.res_{res}bp.window_{w}bp.domains.bed"),
            sample=SAMPLES,
            count=COUNTS,
            w=WINDOWS,
            res=RESOLUTIONS,
        ),
    output:
        path.join("Statistics", "tad-distances.tsv"),
    shell:
        "python {input.script}"

rule plots:
    input:
        script = "plot-bpscore.R",
        data = path.join("Statistics", "tad-distances.tsv"),
    output:
        expand(
            path.join(PLOT_DIR, "bp-score.primary.{plot}.{ext}"),
            plot=["tumour", "benign", "tumour-vs-benign", "tumour-vs-benign.stdev"],
            ext=["png", "pdf"],
        ),
    shell:
        "Rscript {input.script}"
