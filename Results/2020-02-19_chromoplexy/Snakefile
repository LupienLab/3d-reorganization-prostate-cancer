# ==============================================================================
# Environment
# ==============================================================================
import os.path as path
import pandas as pd

CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External", "LowC_Samples_Data_Available.tsv"),
    sep="\t",
    header=0
)
SAMPLES = ["PCa" + str(i) for i in CONFIG["Sample ID"].tolist()]

ACETYL_DIR = "Acetylation"
PLOT_DIR = "Plots"
BREAK_DIR = path.join("..", "2019-07-24_breakfinder", "Breakpoints", "Default")
TAD_DIR = path.join("..", "2020-01-15_TAD-aggregation", "resolved-TADs")
CHIP_DIR = path.join("..", "..", "Data", "Processed", "2019-05-03_PCa-H3K27ac-peaks", "BAMs")

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        "breakpoints.all-samples.p",
        "breakpoints.per-sample.p",
        "sv-breakpoints.tsv",
        "sv-disruption-tests.tsv",
        "sv-breakpoints.TADs.tsv",
        "sv-disruption-tests.TADs.tsv",
        "sv-disruption-tests.expression.tsv",
        "sv-disruption-tests.expression.gene-level.tsv",
        "TAD-induced-regions.bed",
        "sv-disruption-tests.acetylation.tsv",

# ==============================================================================
# Rules
# ==============================================================================
rule graphs:
    input:
        script = "breakpoint-components.py",
        breaks = expand(
            path.join(BREAK_DIR, "{sample}.breaks.sorted.manually-resolved.tsv"),
            sample=SAMPLES
        ),
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", "{sample}.40000bp.w_3.domains.bed"),
            sample=SAMPLES
        ),
    output:
        "breakpoints.all-samples.p",
        "breakpoints.per-sample.p",
        "sv-breakpoints.tsv",
        "sv-disruption-tests.tsv"
    shell:
        "python {input.script}"

rule altered_TADs:
    input:
        script = "altered-tads.py",
        graph = "breakpoints.all-samples.p",
        test = "sv-disruption-tests.tsv",
        breaks = expand(
            path.join(BREAK_DIR, "{sample}.breaks.sorted.manually-resolved.tsv"),
            sample=SAMPLES
        ),
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", "{sample}.40000bp.w_3.domains.bed"),
            sample=SAMPLES
        ),
    output:
        "sv-disruption-tests.TADs.tsv",
        "sv-breakpoints.TADs.tsv"
    shell:
        "python {input.script}"

rule altered_expression:
    input:
        script = "altered-expression.py",
        graph = "breakpoints.all-samples.p",
        rna = path.join("..", "..", "Data", "External", "CPC-GENE", "CPC-GENE_Chen-2019_RNAseq_rsem_gene_FPKM.13-LowC-only.tsv"),
        gencode = path.join("..", "..", "Data", "External", "GENCODE", "gencode.v33.all-genes.bed"),
        breaks = expand(
            path.join(BREAK_DIR, "{sample}.breaks.sorted.manually-resolved.tsv"),
            sample=SAMPLES
        ),
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", "{sample}.40000bp.w_3.domains.bed"),
            sample=SAMPLES
        ),
    output:
        "sv-disruption-tests.expression.tsv",
        "sv-disruption-tests.expression.gene-level.tsv"
    shell:
        "python {input.script}"

rule induced_boundaries:
    input:
        script = "create-induced-regions.py",
        bounds = expand(
            path.join(TAD_DIR, "{sample}.40000bp.aggregated-boundaries.tsv"),
            sample=SAMPLES
        ),
    output:
        "TAD-induced-regions.bed",
    shell:
        "python {input.script}"

rule count_chip:
    input:
        chip = path.join(CHIP_DIR, "Pca{sampleid}_{type}.sorted.dedup.bam"),
        bed = "TAD-induced-regions.bed",
    output:
        path.join(ACETYL_DIR, "PCa{sampleid}_{type}.induced-region-counts.bed")
    wildcard_constraints:
        sampleid = "\d+",
        type = "(H3K27ac|input)",
    shell:
        "bedtools coverage -abam {input.chip} -b {input.bed} | sort -k1,1 -V -k2,2n > {output}"

rule altered_acetyl:
    input:
        script = "altered-acetylation.R",
        breaks = "sv-breakpoints.tsv",
        tads = "sv-breakpoints.TADs.tsv",
        tests = "sv-disruption-tests.tsv",
        counts = expand(
            path.join(ACETYL_DIR, "{sample}_{type}.induced-region-counts.bed"),
            sample=SAMPLES,
            type=["H3K27ac", "input"]
        )
    output:
        "sv-disruption-tests.acetylation.tsv",
    shell:
        "Rscript {input.script}"
