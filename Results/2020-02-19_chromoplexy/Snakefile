# ==============================================================================
# Environment
# ==============================================================================
import os.path as path
import pandas as pd

CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External", "LowC_Samples_Data_Available.tsv"),
    sep="\t",
    header=0
)
SAMPLES = ["PCa" + str(i) for i in CONFIG.loc[CONFIG.Include == "Yes", "Sample ID"]]

ACETYL_DIR = "Acetylation"
GRAPH_DIR = "Graphs"
PLOT_DIR = "Plots"
BREAK_DIR = path.join("..", "2019-07-24_breakfinder", "Breakpoints", "Default")
TAD_DIR = path.join("..", "2020-01-15_TAD-aggregation", "resolved-TADs")
CHIP_DIR = path.join("..", "..", "Data", "Processed", "2019-05-03_PCa-H3K27ac-peaks", "BAMs")

PLOT_EXTS = ["png", "pdf"]

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        path.join(GRAPH_DIR, "breakpoints.per-sample.merged-breakpoints.p"),
        path.join(GRAPH_DIR, "sv-breakpoints.tsv"),
        path.join(GRAPH_DIR, "sv-breakpoints.paired.tsv"),
        path.join(GRAPH_DIR, "breakpoints.all-samples.p"),
        path.join(GRAPH_DIR, "sv-disruption-tests.tsv"),
        path.join(GRAPH_DIR, "breakpoints.all-samples.xml"),
        expand(
            path.join(GRAPH_DIR, "breakpoints.{sample}.xml"),
            sample=SAMPLES
        ),
        "TAD-induced-regions.bed",
        path.join("Statistics", "breakpoints.binned.tsv"),
        path.join("Statistics", "breakpoint-pairs.inter-intra-chromosomal.tsv"),
        path.join("Statistics", "breakpoint-components.tsv"),
        expand(
            path.join(PLOT_DIR, "breakpoint-stats", "{plot}.{ext}"),
            plot=[
                "sv-counts",
                "sv-counts.by-chrom",
                "sv-counts.by-chrom.labelled",
                "sv-loci",
                "sv-recurrence",
                "sv-events.size",
                "sv-events.total.T2E-comparison",
                "sv-events.complex.T2E-comparison"
            ],
            ext=PLOT_EXTS
        ),
        path.join(GRAPH_DIR, "sv-disruption-tests.TADs.tsv"),
        expand(
            path.join(PLOT_DIR, "sv-disruption", "tads.count.{ext}"),
            ext=PLOT_EXTS
        ),
        expand(
            path.join(PLOT_DIR, "sv-disruption", "expression.{plot}.{ext}"),
            plot=[
                "p-values",
                "qq",
                "z",
                "fold-change",
                "fold-change.thresholded",
                "fold-change-vs-difference",
                "fold-change.ecdf",
                "fold-change.ecdf.thresholded",
            ],
            ext=PLOT_EXTS,
        ),
        path.join(GRAPH_DIR, "sv-disruption-tests.expression.tsv"),
        path.join(GRAPH_DIR, "sv-disruption-tests.expression.gene-level.tsv"),
        # path.join(GRAPH_DIR, "sv-disruption-tests.acetylation.tsv"),

# ==============================================================================
# Rules
# ==============================================================================
rule graphs:
    input:
        script = "breakpoint-components.py",
        breaks = expand(
            path.join(BREAK_DIR, "{sample}.breaks.sorted.manually-resolved.tsv"),
            sample=SAMPLES
        ),
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", "{sample}.40000bp.w_3.domains.bed"),
            sample=SAMPLES
        ),
    output:
        path.join(GRAPH_DIR, "breakpoints.per-sample.merged-breakpoints.p"),
        path.join(GRAPH_DIR, "sv-breakpoints.tsv"),
        path.join(GRAPH_DIR, "sv-breakpoints.paired.tsv"),
        path.join(GRAPH_DIR, "breakpoints.all-samples.p"),
        path.join(GRAPH_DIR, "sv-disruption-tests.tsv"),
        path.join(GRAPH_DIR, "breakpoints.all-samples.xml"),
        expand(
            path.join(GRAPH_DIR, "breakpoints.{sample}.xml"),
            sample=SAMPLES
        ),
    shell:
        "python {input.script}"

rule plot_breaks:
    input:
        script = "plot-breaks.R",
        breaks = path.join(GRAPH_DIR, "sv-breakpoints.tsv"),
        paired = path.join(GRAPH_DIR, "sv-breakpoints.paired.tsv"),
    output:
        path.join("Statistics", "breakpoints.binned.tsv"),
        path.join("Statistics", "breakpoint-pairs.inter-intra-chromosomal.tsv"),
        path.join("Statistics", "breakpoint-components.tsv"),
        expand(
            path.join(PLOT_DIR, "breakpoint-stats", "{plot}.{ext}"),
            plot=[
                "sv-counts",
                "sv-counts.by-chrom",
                "sv-counts.by-chrom.labelled",
                "sv-loci",
                "sv-recurrence",
                "sv-events.size",
                "sv-events.total.T2E-comparison",
                "sv-events.complex.T2E-comparison"
            ],
            ext=PLOT_EXTS
        ),
    shell:
        "Rscript {input.script}"

rule altered_TADs:
    input:
        script = "altered-tads.py",
        graph = path.join(GRAPH_DIR, "breakpoints.all-samples.p"),
        test = path.join(GRAPH_DIR, "sv-disruption-tests.tsv"),
        breaks = path.join(GRAPH_DIR, "sv-breakpoints.tsv"),
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", "{sample}.40000bp.w_3.domains.bed"),
            sample=SAMPLES
        ),
    output:
        path.join(GRAPH_DIR, "sv-disruption-tests.TADs.tsv"),
    shell:
        "python {input.script}"

rule plot_tads:
    input:
        script = "plot-tads.R",
        data = path.join(GRAPH_DIR, "sv-disruption-tests.TADs.tsv"),
    output:
        expand(
            path.join(PLOT_DIR, "sv-disruption", "tads.count.{ext}"),
            ext=PLOT_EXTS
        )
    shell:
        "Rscript {input.script}"

rule altered_expression:
    input:
        script = "altered-expression.py",
        graph = path.join(GRAPH_DIR, "breakpoints.all-samples.p"),
        rna = path.join("..", "..", "Data", "External", "CPC-GENE", "CPC-GENE_Chen-2019_RNAseq_rsem_gene_FPKM.13-Low-C-only.tsv"),
        gencode = path.join("..", "..", "Data", "External", "GENCODE", "gencode.v33.all-genes.bed"),
        tads = expand(
            path.join(TAD_DIR, "separated-TADs", "{sample}.40000bp.w_3.domains.bed"),
            sample=SAMPLES
        ),
    output:
        path.join(GRAPH_DIR, "sv-disruption-tests.expression.tsv"),
        path.join(GRAPH_DIR, "sv-disruption-tests.expression.gene-level.tsv"),
    shell:
        "python {input.script}"

rule plot_expression:
    input:
        script = "plot-dge.R",
        rna = path.join("..", "..", "Data", "External", "CPC-GENE", "CPC-GENE_Chen-2019_RNAseq_rsem_gene_FPKM.13-Low-C-only.tsv"),
        gencode = path.join("..", "..", "Data", "External", "GENCODE", "gencode.v33.all-genes.bed"),
        tests = path.join(GRAPH_DIR, "sv-disruption-tests.expression.tsv"),
        genes = path.join(GRAPH_DIR, "sv-disruption-tests.expression.gene-level.tsv"),
        chroms = path.join("..", "..", "Data", "Processed", "2019-06-18_PCa-LowC-sequencing", "hg38.sizes.txt"),
    output:
        expand(
            path.join(PLOT_DIR, "sv-disruption", "expression.{plot}.{ext}"),
            plot=[
                "p-values",
                "qq",
                "z",
                "fold-change",
                "fold-change.thresholded",
                "fold-change-vs-difference",
                "fold-change.ecdf",
                "fold-change.ecdf.thresholded",
            ],
            ext=PLOT_EXTS,
        ),
    shell:
        "Rscript {input.script}"

rule induced_boundaries:
    input:
        script = "create-induced-regions.py",
        bounds = expand(
            path.join(TAD_DIR, "{sample}.40000bp.aggregated-boundaries.tsv"),
            sample=SAMPLES
        ),
    output:
        "TAD-induced-regions.bed",
    shell:
        "python {input.script}"

rule count_chip:
    input:
        chip = path.join(CHIP_DIR, "Pca{sampleid}_{type}.sorted.dedup.bam"),
        bed = "TAD-induced-regions.bed",
    output:
        path.join(ACETYL_DIR, "PCa{sampleid}_{type}.induced-region-counts.bed")
    wildcard_constraints:
        sampleid = "\d+",
        type = "(H3K27ac|input)",
    shell:
        "bedtools coverage -abam {input.chip} -b {input.bed} | sort -k1,1 -V -k2,2n > {output}"

rule altered_acetyl:
    input:
        script = "altered-acetylation.R",
        breaks = path.join(GRAPH_DIR, "sv-breakpoints.tsv"),
        tads = path.join(GRAPH_DIR, "sv-disruption-tests.TADs.tsv"),
        tests = path.join(GRAPH_DIR, "sv-disruption-tests.tsv"),
        counts = expand(
            path.join(ACETYL_DIR, "{sample}_{type}.induced-region-counts.bed"),
            sample=SAMPLES,
            type=["H3K27ac", "input"]
        )
    output:
        "sv-disruption-tests.acetylation.tsv",
    shell:
        "Rscript {input.script}"
