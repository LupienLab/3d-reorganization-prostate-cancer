# ==============================================================================
# Configuration
# ==============================================================================
import pandas as pd
import os.path as path

TUMOUR_CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External", "LowC_Samples_Data_Available.tsv"),
    sep="\t"
)
TUMOUR_CONFIG = TUMOUR_CONFIG.loc[TUMOUR_CONFIG.Include == "Yes", :]

BENIGN_CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "Raw", "191220_A00827_0104_AHMW25DMXX", "config.tsv"),
    sep="\t"
)
BENIGN_CONFIG = BENIGN_CONFIG.loc[BENIGN_CONFIG.Include == "Yes", :]

LINE_CONFIG = pd.read_csv(
    path.join("..", "2020-05-13_cell-line-TADs", "config.tsv"),
    sep="\t"
)

TUMOUR_SAMPLES = ["PCa" + str(i) for i in TUMOUR_CONFIG["Sample ID"]]
BENIGN_SAMPLES = BENIGN_CONFIG["Sample"].tolist()
LINE_SAMPLES = LINE_CONFIG["SampleID"].tolist()
ALL_SAMPLES = TUMOUR_SAMPLES + BENIGN_SAMPLES + LINE_SAMPLES
TAD_DIR = {
    "tumour": path.join("..", "2019-07-08_TADs", "TADs"),
    "benign": path.join("..", "2020-02-21_benign-TADs", "TADs"),
    "line": path.join("..", "2020-05-13_cell-line-TADs", "TADs"),
}
PLOT_DIR = "Plots"
WINDOWS = list(range(3, 41))

PLOT_EXTS=["png", "pdf"]


# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join("resolved-TADs", "{sample}.40000bp.{ext}"),
            sample=ALL_SAMPLES,
            ext=[
                "aggregated-domains.sorted.bedGraph",
                "aggregated-boundaries.tsv",
                "aggregated-boundaries.bedGraph",
            ],
        ),
        expand(
            path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.{ext}"),
            sample=ALL_SAMPLES,
            w=WINDOWS,
            ext=["bed", "beddb"],
        ),
        expand(
            path.join("CTCF", "{sample}.{line}-CTCF-peaks.bed"),
            sample=ALL_SAMPLES,
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
        ),
        expand(
            path.join("CTCF", "TAD-boundary.{line}-CTCF-peaks.distances.tsv"),
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
        ),
        expand(
            path.join("Statistics", "tad-boundary-enrichment.{line}-CTCF.tsv"),
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
        ),
        expand(
            path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{line}.{ext}"),
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
            ext=PLOT_EXTS,
        ),
        expand(
            path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{line}.fold.{ext}"),
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
            ext=PLOT_EXTS,
        ),
        path.join("Statistics", "tad-distances.tsv"),
        path.join("Statistics", "tad-similarity.sample-types.tsv"),
        expand(
            path.join(PLOT_DIR, "{plot}.{ext}"),
            plot=[
                "bp-score.primary.tumour",
                "bp-score.primary.benign",
                "bp-score.primary.tumour-vs-benign",
                "bp-score.primary.tumour-vs-benign.stdev",
                "bp-score.line.tumour-vs-benign",
                "bp-score.line.tumour-vs-benign.stdev",
                "bp-score.window-similarity",
                "bp-score.window-similarity.delta",
                "bp-score.cluster",
            ],
            ext=PLOT_EXTS
        ),
        expand(
            path.join(PLOT_DIR, "{plot}.{ext}"),
            plot=[
                "boundary-counts",
                "boundary-counts.by-persistence",
                "tad-counts",
                "tad-counts.by-window",
                "tad-counts.by-sample",
                "tad-size.distribution",
                "tad-size.distribution.reduced",
                "tad-size.coeff-var",
            ],
            ext=PLOT_EXTS,
        ),
        expand(
            path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{line}.{ext}"),
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
            ext=PLOT_EXTS,
        ),
        expand(
            path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{line}.fold.{ext}"),
            line=["LNCaP", "22Rv1", "VCaP", "C4-2B"],
            ext=PLOT_EXTS,
        ),

# ==============================================================================
# Rules
# ==============================================================================
rule agg_tads_tumour:
    input:
        script = "aggregate-TADs.R",
        tads = expand(
            path.join(TAD_DIR["tumour"], "w_{w}", "{{sample}}.40000bp.domains.bed"),
            w=WINDOWS
        )
    output:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph"),
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv"),
    wildcard_constraints:
        sample="PCa\d+"
    params:
        indir=TAD_DIR["tumour"]
    shell:
        "Rscript {input.script} {wildcards.sample} -p resolved-TADs/{wildcards.sample}.40000bp --in-dir {params.indir}"

rule agg_tads_benign:
    input:
        script = "aggregate-TADs.R",
        tads = expand(
            path.join(TAD_DIR["benign"], "w_{w}", "{{sample}}.40000bp.domains.bed"),
            w=WINDOWS
        )
    output:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph"),
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv"),
    wildcard_constraints:
        sample="Benign-Prostate-\d+"
    params:
        indir=TAD_DIR["benign"]
    shell:
        "Rscript {input.script} {wildcards.sample} -p resolved-TADs/{wildcards.sample}.40000bp --in-dir {params.indir}"

rule agg_tads_line:
    input:
        script = "aggregate-TADs.R",
        tads = expand(
            path.join(TAD_DIR["line"], "w_{w}", "{{sample}}.40000bp.domains.bed"),
            w=WINDOWS
        )
    output:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph"),
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv"),
    wildcard_constraints:
        sample="(SRR\d+|4DN[A-Za-z0-9]+)"
    params:
        indir=TAD_DIR["line"]
    shell:
        "Rscript {input.script} {wildcards.sample} -p resolved-TADs/{wildcards.sample}.40000bp --in-dir {params.indir}"

rule sort_tads:
    input:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph")
    output:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.sorted.bedGraph")
    shell:
        "sort -k1,1 -V -k2,2n -k3,3n -k6,6n {input} > {output}"

rule clodius_agg_2d_bdg:
     input:
         "{file}.sorted.bedGraph"
     output:
         "{file}.bed2ddb"
     params:
         "-a hg38 --chr1-col 1 --chr2-col 1 --from1-col 2 --from2-col 2 --to1-col 3 --to2-col 3"
     shell:
         "clodius aggregate bedpe {params} -o {output} {input}"

rule clodius_agg_2d_bed:
     input:
         "{file}.bed"
     output:
         "{file}.bed2ddb"
     params:
         "-a hg38 --chr1-col 1 --chr2-col 1 --from1-col 2 --from2-col 2 --to1-col 3 --to2-col 3"
     shell:
         "clodius aggregate bedpe {params} -o {output} {input}"

rule clodius_agg_1d:
    input:
        path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.bed"),
    output:
        path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.beddb"),
    params:
        "-a hg38"
    shell:
        "clodius aggregate bedfile {params} -o {output} {input}"

rule sort_boundaries:
    input:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv")
    output:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.bedGraph")
    shell:
        "awk '{{FS=OFS=\"\t\"}}{{if (NR > 1) print $1, $2, $2 + 1, $4, $3}}' {input} | sort -k1,1 -V -k2,2n > {output}"

rule extend_boundaries:
    input:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.bedGraph"),
    output:
        temp(path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.extended-{dist}bp.bed"))
    wildcard_constraints:
        dist = "\d+"
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{ if ($2-{wildcards.dist} < 0) {{print $1, 0, $3+{wildcards.dist}, $1, $2, $3, $4, $5}} else {{print $1, $2-{wildcards.dist}, $3+{wildcards.dist}, $1, $2, $3, $4, $5}} }}' {input} > {output}"

rule separate_by_window_size:
    input:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.sorted.bedGraph")
    output:
        expand(
            path.join("resolved-TADs", "separated-TADs", "{{sample}}.40000bp.w_{w}.domains.bed"),
            w=WINDOWS
        )
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{print $1, $2, $3, $4, $5 > \"resolved-TADs/separated-TADs/{wildcards.sample}.40000bp.w_\"$6\".domains.bed\"}}' {input}"

rule bpscore:
    input:
        script = "calc-tad-similarity.py",
        data = expand(
            path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.bed"),
            sample=ALL_SAMPLES,
            w=WINDOWS,
        )
    output:
        path.join("Statistics", "tad-distances.tsv"),
    shell:
        "python {input.script}"

rule window_bpscore:
    input:
        script = "stopping-window-size.py",
        data = expand(
            path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.bed"),
            sample=TUMOUR_SAMPLES,
            w=WINDOWS,
        ),
    output:
        path.join("Statistics", "tad-similarity-deltas.tsv"),
        path.join("Statistics", "tad-similarity-supremum.tsv"),
    shell:
        "python {input.script}"

rule boundary_prostateline_ctcf_intersection:
    input:
        lncap_ctcf = path.join("../../Data/External/ENCODE_ChIP/{line}_CTCF_Conservative.canonical.sorted.bed"),
        bounds = path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.extended-200000bp.bed"),
    output:
        path.join("CTCF", "{sample}.{line}-CTCF-peaks.bed")
    shell:
        "bedtools intersect -wa -wb -a {input.bounds} -b {input.lncap_ctcf} > {output}"

rule boundary_prostateline_ctcf_proximity:
    input:
        script = "boundary-ctcf-proximity.R",
        pairs = expand(
            path.join("CTCF", "{sample}.{{line}}-CTCF-peaks.bed"),
            sample=ALL_SAMPLES,
        ),
    output:
        path.join("CTCF", "TAD-boundary.{line}-CTCF-peaks.distances.tsv"),
    shell:
        "Rscript {input.script} {wildcards.line}"

rule plots:
    input:
        script = "plot-TADs.R",
        sample_bpscore = path.join("Statistics", "tad-distances.tsv"),
        window_bpscore = path.join("Statistics", "tad-similarity-deltas.tsv"),
        boundaries = expand(
            path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv"),
            sample=TUMOUR_SAMPLES,
        ),
        tads = expand(
            path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph"),
            sample=TUMOUR_SAMPLES,
        ),
        ctcf = path.join("CTCF", "TAD-boundary.22Rv1-CTCF-peaks.distances.tsv"),
    output:
        expand(
            path.join(PLOT_DIR, "{plot}.{ext}"),
            plot=[
                "boundary-counts",
                "boundary-counts.by-persistence",
                "tad-counts",
                "tad-counts.by-window",
                "tad-counts.by-sample",
                "tad-size.distribution",
                "tad-size.distribution.reduced",
                "tad-size.coeff-var",
            ],
            ext=PLOT_EXTS,
        ),
    shell:
        "Rscript {input.script}"

rule agg_ctcf_enrichment:
    input:
        script = "ctcf-enrichment.R",
        dists = path.join("CTCF", "TAD-boundary.{cell}-CTCF-peaks.distances.tsv"),
    output:
        path.join("Statistics", "tad-boundary-enrichment.{cell}-CTCF.tsv"),
        path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{cell}.png"),
        path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{cell}.pdf"),
        path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{cell}.fold.png"),
        path.join(PLOT_DIR, "boundary-counts.ctcf-proximity.{cell}.fold.pdf"),
    shell:
        "Rscript {input.script} {wildcards.cell}"

rule plot_bpscore:
    input:
        script = "plot-bpscore.R",
        tad_dist = path.join("Statistics", "tad-distances.tsv"),
        tad_delta = path.join("Statistics", "tad-similarity-deltas.tsv"),
    output:
        path.join("Statistics", "tad-similarity.sample-types.tsv"),
        path.join(PLOT_DIR, "bp-score.primary.tumour.png"),
        path.join(PLOT_DIR, "bp-score.primary.tumour.pdf"),
        path.join(PLOT_DIR, "bp-score.primary.benign.png"),
        path.join(PLOT_DIR, "bp-score.primary.benign.pdf"),
        path.join(PLOT_DIR, "bp-score.primary.tumour-vs-benign.png"),
        path.join(PLOT_DIR, "bp-score.primary.tumour-vs-benign.pdf"),
        path.join(PLOT_DIR, "bp-score.primary.tumour-vs-benign.stdev.png"),
        path.join(PLOT_DIR, "bp-score.primary.tumour-vs-benign.stdev.pdf"),
        path.join(PLOT_DIR, "bp-score.line.tumour-vs-benign.png"),
        path.join(PLOT_DIR, "bp-score.line.tumour-vs-benign.pdf"),
        path.join(PLOT_DIR, "bp-score.line.tumour-vs-benign.stdev.png"),
        path.join(PLOT_DIR, "bp-score.line.tumour-vs-benign.stdev.pdf"),
        path.join(PLOT_DIR, "bp-score.window-similarity.png"),
        path.join(PLOT_DIR, "bp-score.window-similarity.pdf"),
        path.join(PLOT_DIR, "bp-score.window-similarity.delta.png"),
        path.join(PLOT_DIR, "bp-score.window-similarity.delta.pdf"),
        path.join(PLOT_DIR, "bp-score.cluster.png"),
        path.join(PLOT_DIR, "bp-score.cluster.pdf"),
    shell:
        "Rscript {input.script}"
