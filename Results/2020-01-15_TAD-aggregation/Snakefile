import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
TUMOUR_CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External", "LowC_Samples_Data_Available.tsv"),
    sep="\t"
)
BENIGN_CONFIG = pd.read_csv(
    path.join("../../Data/Raw/191220_A00827_0104_AHMW25DMXX/config.tsv"),
    sep="\t"
)

TUMOUR_SAMPLES = ["PCa" + str(i) for i in TUMOUR_CONFIG.loc[TUMOUR_CONFIG.Include == "Yes", "Sample ID"]]
BENIGN_SAMPLES = BENIGN_CONFIG["Sample"].tolist()
ALL_SAMPLES = TUMOUR_SAMPLES + BENIGN_SAMPLES
TAD_DIR = path.join("..", "2019-07-08_TADs", "TADs")
PLOT_DIR = "Plots"
WINDOWS = list(range(3, 41))

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join("resolved-TADs", "{sample}.40000bp.{ext}"),
            sample=TUMOUR_SAMPLES,
            ext=[
                "aggregated-domains.sorted.bedGraph",
                "aggregated-boundaries.tsv",
                "aggregated-boundaries.bedGraph",
            ],
        ),
        expand(
            path.join("resolved-TADs", "separated-TADs",
                      "{sample}.40000bp.w_{w}.domains.{ext}"),
            sample=TUMOUR_SAMPLES,
            w=WINDOWS,
            ext=["bed"],
            # ext=["bed", "beddb"],
            #ext=["bed", "beddb", "bed2ddb"],
        ),
        expand(
            path.join("CTCF", "{sample}.LNCaP-CTCF-peaks.bed"),
            sample=TUMOUR_SAMPLES,
        ),
        path.join("CTCF", "TAD-boundary.LNCaP-CTCF-peaks.distances.tsv"),
        #expand(
        #    path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bed2ddb"),
        #    sample=SAMPLES,
        #),
        path.join("Statistics", "tad-distances.tsv"),
        expand(
            path.join(PLOT_DIR, "{plot}.{ext}"),
            plot=[
                "boundary-counts",
                "boundary-counts.by-persistence",
                "boundary-counts.ctcf-proximity",
                "boundary-counts.ctcf-proximity.fold",
                "tad-counts",
                "tad-counts.by-window",
                "tad-counts.by-sample",
                "tad-size.distribution",
                "tad-size.distribution.reduced",
                "tad-size.coeff-var",
                "bp-score",
                "bp-score.window-similarity",
                "bp-score.window-similarity.delta",
            ],
            ext=["png", "pdf"]
        ),

# ==============================================================================
# Rules
# ==============================================================================
rule agg_tads:
    input:
        script = "aggregate-TADs.R",
        tads = expand(
            path.join(TAD_DIR, "w_{w}", "{{sample}}.40000bp.domains.bed"),
            w=WINDOWS
        )
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.bedGraph"),
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.tsv"),
    shell:
        "Rscript {input.script} {wildcards.sample} -p resolved-TADs/{wildcards.sample}.40000bp --in-dir {TAD_DIR}"

rule sort_tads:
    input:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.bedGraph")
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.sorted.bedGraph")
    shell:
        "sort -k1,1 -V -k2,2n -k3,3n -k6,6n {input} > {output}"

rule clodius_agg_2d_bdg:
     input:
         "{file}.sorted.bedGraph"
     output:
         "{file}.bed2ddb"
     params:
         "-a hg38 --chr1-col 1 --chr2-col 1 --from1-col 2 --from2-col 2 --to1-col 3 --to2-col 3"
     shell:
         "clodius aggregate bedpe {params} -o {output} {input}"

rule clodius_agg_2d_bed:
     input:
         "{file}.bed"
     output:
         "{file}.bed2ddb"
     params:
         "-a hg38 --chr1-col 1 --chr2-col 1 --from1-col 2 --from2-col 2 --to1-col 3 --to2-col 3"
     shell:
         "clodius aggregate bedpe {params} -o {output} {input}"

rule clodius_agg_1d:
    input:
        path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.bed"),
    output:
        path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.beddb"),
    params:
        "-a hg38"
    shell:
        "clodius aggregate bedfile {params} -o {output} {input}"

rule sort_boundaries:
    input:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.tsv")
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.bedGraph")
    shell:
        "awk '{{FS=OFS=\"\t\"}}{{if (NR > 1) print $1, $2, $2 + 1, $4, $3}}' {input} | sort -k1,1 -V -k2,2n > {output}"

rule extend_boundaries:
    input:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.bedGraph"),
    output:
        path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.extended-{dist}bp.bed")
    wildcard_constraints:
        dist = "\d+"
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{ if ($2-{wildcards.dist} < 0) {{print $1, 0, $3+{wildcards.dist}, $1, $2, $3, $4, $5}} else {{print $1, $2-{wildcards.dist}, $3+{wildcards.dist}, $1, $2, $3, $4, $5}} }}' {input} > {output}"

rule separate_by_window_size:
    input:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.sorted.bedGraph")
    output:
        expand(
            path.join("resolved-TADs", "separated-TADs",
                      "{{sample}}.40000bp.w_{w}.domains.bed"),
            w=WINDOWS
        )
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{print $1, $2, $3, $4, $5 > \"resolved-TADs/separated-TADs/{wildcards.sample}.40000bp.w_\"$6\".domains.bed\"}}' {input}"

rule bpscore:
    input:
        script = "calc-tad-similarity.py",
        data = expand(
            path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.bed"),
            sample=TUMOUR_SAMPLES,
            w=WINDOWS,
        )
    output:
        path.join("Statistics", "tad-distances.tsv"),
    shell:
        "python {input.script}"

rule window_bpscore:
    input:
        script = "stopping-window-size.py",
        data = expand(
            path.join("resolved-TADs", "separated-TADs", "{sample}.40000bp.w_{w}.domains.bed"),
            sample=TUMOUR_SAMPLES,
            w=WINDOWS,
        ),
    output:
        path.join("Statistics", "tad-similarity-deltas.tsv"),
        path.join("Statistics", "tad-similarity-supremum.tsv"),
    shell:
        "python {input.script}"

rule boundary_lncap_ctcf_intersection:
    input:
        lncap_ctcf = path.join("../../Data/External/ENCODE_ChIP/LNCaP_CTCF_Conservative.canonical.sorted.bed"),
        bounds = path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.extended-200000bp.bed"),
    output:
        path.join("CTCF", "{sample}.LNCaP-CTCF-peaks.bed")
    shell:
        "bedtools intersect -wa -wb -a {input.bounds} -b {input.lncap_ctcf} > {output}"

rule boundary_lncap_ctcf_proximity:
    input:
        script = "boundary-ctcf-proximity.py",
        pairs = expand(
            path.join("CTCF", "{sample}.LNCaP-CTCF-peaks.bed"),
            sample=TUMOUR_SAMPLES,
        ),
    output:
        path.join("CTCF", "TAD-boundary.LNCaP-CTCF-peaks.distances.tsv"),
    shell:
        "python {input.script}"

rule plots:
    input:
        script = "plot-TADs.R",
        sample_bpscore = path.join("Statistics", "tad-distances.tsv"),
        window_bpscore = path.join("Statistics", "tad-similarity-deltas.tsv"),
        boundaries = expand(
            path.join("resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv"),
            sample=TUMOUR_SAMPLES,
        ),
        tads = expand(
            path.join("resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph"),
            sample=TUMOUR_SAMPLES,
        ),
        ctcf = path.join("CTCF", "TAD-boundary.LNCaP-CTCF-peaks.distances.tsv"),
    output:
        expand(
            path.join(PLOT_DIR, "{plot}.{ext}"),
            plot=[
                "boundary-counts",
                "boundary-counts.by-persistence",
                "boundary-counts.ctcf-proximity",
                "boundary-counts.ctcf-proximity.fold",
                "tad-counts",
                "tad-counts.by-window",
                "tad-counts.by-sample",
                "tad-size.distribution",
                "tad-size.distribution.reduced",
                "tad-size.coeff-var",
                "bp-score",
                "bp-score.window-similarity",
                "bp-score.window-similarity.delta",
            ],
            ext=["png", "pdf"],
        ),
    shell:
        "Rscript {input.script}"
