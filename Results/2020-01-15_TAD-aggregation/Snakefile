import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv(
    path.join("..", "..", "Data", "External",
              "LowC_Samples_Data_Available.tsv"),
    sep="\t"
)

SAMPLES = ["PCa" + str(i) for i in CONFIG["Sample ID"].tolist()]
TAD_DIR = path.join("..", "2019-07-08_TADs", "TADs")
WINDOWS = list(range(3, 31))

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join("resolved-TADs", "{sample}.40000bp.{ext}"),
            sample=SAMPLES,
            ext=[
                "aggregated-domains.sorted.bedGraph",
                "aggregated-boundaries.tsv",
                "aggregated-boundaries.bedGraph",
                "aggregated-boundaries.extended-20000bp.bedGraph",
            ]
        ),
        expand(
            path.join("resolved-TADs", "separated-TADs",
                      "{sample}.40000bp.w_{w}.domains.bed"),
            sample=SAMPLES,
            w=WINDOWS
        ),

# ==============================================================================
# Rules
# ==============================================================================
rule agg_tads:
    input:
        script = "aggregate-TADs.R",
        tads = expand(
            path.join(TAD_DIR, "w_{w}", "{{sample}}.40000bp.domains.bed"),
            w=WINDOWS
        )
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.bedGraph"),
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.tsv"),
    shell:
        "Rscript {input.script} {wildcards.sample} -p resolved-TADs/{wildcards.sample}.40000bp"

rule sort_tads:
    input:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.bedGraph")
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.sorted.bedGraph")
    shell:
        "sort -k1,1 -V -k2,2n -k3,3n -k6,6n {input} > {output}"

rule sort_boundaries:
    input:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.tsv")
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.bedGraph")
    shell:
        "awk '{{FS=OFS=\"\t\"}}{{if (NR > 1) print $1, $2, $2 + 1, $4, $3}}' {input} | sort -k1,1 -V -k2,2n > {output}"

rule extend_boundaries:
    input:
        bed = path.join("resolved-TADs",
                        "{sample}.40000bp.aggregated-boundaries.bedGraph"),
    output:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-boundaries.extended-{dist}bp.bedGraph")
    wildcard_constraints:
        dist = "\d+"
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{ if ($2-{wildcards.dist} < 0) {{print $1, 0, $3+{wildcards.dist}, $4, $5}} else {{print $1, $2-{wildcards.dist}, $3+{wildcards.dist}, $4, $5}} }}' {input} > {output}"

rule separate_by_window_size:
    input:
        path.join("resolved-TADs",
                  "{sample}.40000bp.aggregated-domains.sorted.bedGraph")
    output:
        expand(
            path.join("resolved-TADs", "separated-TADs",
                      "{{sample}}.40000bp.w_{w}.domains.bed"),
            w=WINDOWS
        )
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{print $1, $2, $3, $4, $5 > \"resolved-TADs/separated-TADs/{wildcards.sample}.40000bp.w_\"$6\".domains.bed\"}}' {input}"
