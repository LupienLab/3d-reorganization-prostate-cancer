import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv(
    path.join('..', '..', 'Data', 'External',
              'LowC_Samples_Data_Available.tsv'),
    sep='\t',
    index_col=False
)
SAMPLES = ['PCa' + str(i) for i in CONFIG['Sample ID']]

BAM_DIR = path.join(
    '..', '..', 'Data', 'Processed', '2019-06-18_PCa-LowC-sequencing', 'Aligned'
)
BREAK_DIR = 'Breakpoints'
SCRIPT_DIR = 'Scripts'
PLOT_DIR = 'Plots'
REPORT_DIR = 'Reports'

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join(BREAK_DIR, '{param}', '{sample}.breaks.txt'),
            sample=SAMPLES,
            param=['Default', 'Min_1kbp', 'Low_Thresh_30', 'Low_Thresh_20']
        ),
        expand(
            path.join(BREAK_DIR, '{param}', 'breakpoints.{ext}'),
            param=['Default'],
            ext=['bedpe', 'tsv']
        ),
        expand(
            path.join(BREAK_DIR, "Default", "{sample}.breaks.bed"),
            sample=SAMPLES
        )

# ==============================================================================
# Rules
# ==============================================================================
rule install_breakfinder_dev:
    input:
        "hic_breakfinder/configure"
    output:
        "hic_breakfinder/bin/hic_breakfinder"
    params:
        'CPPFLAGS="-I${{CONDA_PREFIX}}/include/bamtools/ -I${{CONDA_PREFIX}}/include/eigen3/"',
        'LDFLAGS="-L${{CONDA_PREFIX}}/lib/"',
        '--prefix="."',
        '--host=linux'
    run:
        commands = [
            'pushd hic_breakfinder/',
            './configure {params}',
            'make',
            'make install'
        ]
        command_str = '; '.join(commands)
        shell(command_str)

rule breakfinder_default:
    input:
        bam = path.join(BAM_DIR, '{sample}.agg.hicup.sorted.bam'),
        inter = 'inter_expect_1Mb.hg38.txt',
        intra = 'intra_expect_100kb.hg38.txt'
    output:
        path.join(BREAK_DIR, 'Default', '{sample}.breaks.txt'),
    shell:
        'pushd {BREAK_DIR}/Default; hic_breakfinder --bam-file {input.bam} --exp-file-inter ../../{input.inter} --exp-file-intra ../../{input.intra} --name {wildcards.sample}; popd;'

rule breakfinder_1kb:
    input:
        bam = path.join(BAM_DIR, '{sample}.agg.hicup.sorted.bam'),
        inter = 'inter_expect_1Mb.hg38.txt',
        intra = 'intra_expect_100kb.hg38.txt'
    output:
        path.join(BREAK_DIR, 'Min_1kb', '{sample}.breaks.txt'),
    shell:
        'pushd {BREAK_DIR}/Min_1kbp; hic_breakfinder --bam-file {input.bam} --exp-file-inter ../../{input.inter} --exp-file-intra ../../{input.intra} --name {wildcards.sample} --min-1kb; popd;'

rule breakfinder_low_thresh:
    input:
        bam = path.join(BAM_DIR, '{sample}.agg.hicup.sorted.bam'),
        inter = 'inter_expect_1Mb.hg38.txt',
        intra = 'intra_expect_100kb.hg38.txt'
    output:
        path.join(BREAK_DIR, 'Low_Thresh_{thresh}', '{sample}.breaks.txt'),
    params:
        threshold = lambda wildcards: '--thresh {}'.format(wildcards.thresh)
    run:
        commands = [
            'pushd {BREAK_DIR}/Low_Thresh_{wildcards.thresh}',
            '../../hic_breakfinder/bin/hic_breakfinder --name {wildcards.sample} {params.threshold} --bam-file {input.bam} --exp-file-inter ../../{input.inter} --exp-file-intra ../../{input.intra}',
            'popd'
        ]
        command_str = '; '.join(commands)
        shell(command_str)

rule agg_breaks:
    input:
        script = path.join(SCRIPT_DIR, 'agg-breaks.R'),
        data = expand(
            path.join(BREAK_DIR, '{{calltype}}', '{sample}.breaks.txt'),
            sample=SAMPLES
        )
    output:
        path.join(BREAK_DIR, '{calltype}', 'breakpoints.bedpe'),
        path.join(BREAK_DIR, '{calltype}', 'breakpoints.tsv'),
    shell:
        'Rscript {input.script} {input.data} -p {BREAK_DIR}/{wildcards.calltype}/breakpoints'

rule plot_breakpoints:
    input:
        wrapper = path.join(SCRIPT_DIR, 'plot-breakpoint-matrices.sh'),
        script = path.join('..', '2019-07-08_TADs', 'plot-tads.py'),
        data = path.join(BREAK_DIR, 'Default', '{sample}.breakspoints.bedpe')
    output:
        path.join(REPORT_DIR, 'breakpoint-plots.txt')
    shell:
        'bash {input.wrapper} -i {input.data} -p {PLOT_DIR}/Breakpoints/{wildcards.sample} > {output}'

rule bf2vcf:
    input:
        script = path.join(SCRIPT_DIR, "bf2vcf.py"),
        data = path.join(BREAK_DIR, "Default", "{sample}.breaks.txt")
    output:
        path.join(BREAK_DIR, "Default", "{sample}.vcf")
    shell:
        'python {input.script} {input.data} -o {output}'

rule sort_vcf:
    input:
        "{file}.vcf"
    output:
        "{file}.sorted.vcf"
    shell:
        "awk '/^#/ {{print $0; next}} {{print $0 | \"sort -k1,1 -V -k2,2n\"}}' {input} > {output}"

rule bf2bed:
    input:
        path.join(BREAK_DIR, "Default", "{sample}.breaks.txt")
    output:
        path.join(BREAK_DIR, "Default", "{sample}.breaks.bed")
    params:
        '-v FS="\t" -v OFS="\t"'
    shell:
        'awk {params} \'{{print $2, $3, $4, "SV"NR, "\\n"$6, $7, $8, "SV"NR}}\' {input} > {output}'