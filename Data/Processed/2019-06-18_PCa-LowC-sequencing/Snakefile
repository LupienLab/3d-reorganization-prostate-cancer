# =============================================================================
# Configuration
# =============================================================================
import pandas as pd
import os.path as path

CONFIG = pd.read_csv("config.tsv", index_col=False, sep="\t")
CONFIG = CONFIG.loc[CONFIG.Include == "Yes", :]

REPORT_DIR = "Reports"
ALIGN_DIR = "Aligned"
CONTACT_DIR = "Contacts"
LOOP_DIR = "Loops"
RAW_DATA_DIR = path.join("..", "..", "Raw")
BATCHES = {
	"Malignant": ["190509_A00827_0007_AHKYH3DSXX_HiC", "190605_A00827_0009_BHLGJ3DSXX_HiC"],
	"Benign": ["191213_A00827_0097_BHMV2YDMXX_HiC", "191220_A00827_0104_AHMW25DMXX_HiC"],
}

SAMPLES = CONFIG["Sample"].tolist()

CHRS = ["chr" + str(i) for i in list(range(1, 23)) + ["X"]]

RESOLUTIONS = [
	2000, 3000, 4000, 5000,
	10000, 20000, 30000, 40000, 50000,
	100000, 200000, 300000, 400000, 500000,
	1000000, 2000000, 3000000, 4000000, 5000000
]

wildcard_constraints:
	sample = "(PCa|Benign-Prostate-)[0-9]+",
	read = "[1-2]",
	res = "[0-9]+"

# =============================================================================
# Meta Rules
# =============================================================================
rule all:
	input:
		expand(
			path.join(REPORT_DIR, "{sample}.balanced_report.txt"),
			sample=SAMPLES
		),
		expand(
			path.join(CONTACT_DIR, "{sample}.mcool"),
			sample=SAMPLES
		),
		path.join(REPORT_DIR, "hicup_class.png"),
		expand(
			path.join(CONTACT_DIR, "{sample}.res_{res}bp.exp.cis.tsv"),
			sample=SAMPLES,
			res=[10000],
		),
		expand(
			path.join(LOOP_DIR, "{sample}.res_{res}bp.loops.tsv"),
			sample=SAMPLES,
			res=[10000],
		),
		expand(
			path.join("CNV", "segmentation", "{sample}_CNV_segments.txt"),
			sample=SAMPLES,
		),
		expand(
			path.join("Tracks", "{sample}.cnv.bw"),
			sample=SAMPLES,
		),
		path.join(REPORT_DIR, "multiqc_report.html"),

# =============================================================================
# Rules
# =============================================================================
# Contact matrices
# ------------------------------------------------------------------------------
rule merge_coolers_tumour:
	input:
		path.join(RAW_DATA_DIR, BATCHES["Malignant"][0], "Contacts", "{sample}.cool"),
		path.join(RAW_DATA_DIR, BATCHES["Malignant"][1], "Contacts", "{sample}.cool"),
	output:
		temp(path.join(CONTACT_DIR, "{sample}.cool")),
	wildcard_constraints:
		sample="PCa\d+"
	shell:
		"cooler merge {output} {input[0]} {input[1]}"

rule merge_coolers_benign:
	input:
		path.join(RAW_DATA_DIR, BATCHES["Benign"][0], "Contacts", "{sample}.cool"),
		path.join(RAW_DATA_DIR, BATCHES["Benign"][1], "Contacts", "{sample}.cool"),
	output:
		temp(path.join(CONTACT_DIR, "{sample}.cool")),
	wildcard_constraints:
		sample="Benign-Prostate-\d+"
	shell:
		"cooler merge {output} {input[0]} {input[1]}"

rule balance:
	input:
		path.join(CONTACT_DIR, "{sample}.cool")
	output:
		path.join(REPORT_DIR, "{sample}.balanced_report.txt")
	shell:
		"cooler balance {input} >> {output} 2>&1"

rule adjust_res:
	input:
		path.join(CONTACT_DIR, "{sample}.cool")
	output:
		path.join(CONTACT_DIR, "{sample}.mcool")
	params:
		"--balance -p 8 -r {}".format(",".join([str(r) for r in RESOLUTIONS]))
	shell:
		"cooler zoomify {params} -o {output} {input}"

rule expected_cis:
	input:
		cool = path.join(CONTACT_DIR, "{sample}.mcool"),
	output:
		path.join(CONTACT_DIR, "{sample}.res_{res}bp.exp.cis.tsv"),
	threads: 8
	params:
		"-t cis --balance"
	shell:
		"cooltools compute-expected -p {threads} {params} -o {CONTACT_DIR}/{wildcards.sample}.res_{wildcards.res}bp.exp.cis.tsv {input.cool}::/resolutions/{wildcards.res}"

rule expected_trans:
	input:
		cool = path.join(CONTACT_DIR, "{sample}.mcool"),
	output:
		path.join(CONTACT_DIR, "{sample}.res_{res}bp.exp.trans.tsv"),
	threads: 8
	params:
		"-t trans --balance"
	shell:
		"cooltools compute-expected -p {threads} {params} -o {CONTACT_DIR}/{wildcards.sample}.res_{wildcards.res}bp.exp.trans.tsv {input.cool}::/resolutions/{wildcards.res}"

rule call_loops:
	input:
		path.join(CONTACT_DIR, "{sample}.mcool")
	output:
		path.join(LOOP_DIR, "{sample}.res_{res}bp.{chrom}.loops.tsv"),
	threads: 8
	shell:
		"mustache -f {input} -r {wildcards.res} -ch {wildcards.chrom} -p {threads} -o {output}"

rule merge_loops:
	input:
		expand(
			path.join(LOOP_DIR, "{{sample}}.res_{{res}}bp.{chrom}.loops.tsv"),
			chrom=CHRS,
		),
	output:
		path.join(LOOP_DIR, "{sample}.res_{res}bp.loops.tsv"),
	shell:
		"echo -e 'chr_x\tstart_x\tend_x\tchr_y\tstart_y\tend_y\tfdr\tdetection_scale' > {output}; awk '{{FS=OFS=\"\\t\"}}{{if ($1 != \"BIN1_CHR\") print}}' {input} | sort -k1,1 -V -k4,4 -V -k2,2n -k5,5n >> {output}"

rule call_cnv:
	input:
		path.join(CONTACT_DIR, "{sample}.mcool")
	output:
		path.join("CNV", "segmentation", "{sample}_CNV_segments.txt"),
		path.join("CNV", "segmentation", "{sample}_CNV_segments.l2r.pdf"),
	params:
		" ".join([
			"-f cooler",
			"-r {}".format(10), # resolution in kbp
			"--refdir {}".format(path.join("..", "HiNT-references")),
			"--bicseq {}".format(path.join("..", "BICseq2-seg_v0.7.3")),
			"-o CNV",
			"-g hg38",
			"-e MboI",
		])
	shell:
		"hint cnv -m {input}::/resolutions/10000 {params} -n {wildcards.sample}"

rule correct_hint_pos:
	input:
		script = "fix-cnv-coords.R",
		sizes = "hg38.sizes.txt",
		cnv = path.join("CNV", "segmentation", "{sample}_CNV_segments.txt"),
	output:
		path.join("CNV", "segmentation", "{sample}_CNV_segments.corrected.txt"),
	shell:
		"Rscript {input.script} {input.cnv} {input.sizes} -o {output}"

rule cnv2bdg:
	input:
		path.join("CNV", "segmentation", "{sample}_CNV_segments.corrected.txt"),
	output:
		path.join("Tracks", "{sample}.cnv.bdg"),
	shell:
		"awk '{{FS=OFS=\"\\t\"}}{{if (NR > 1) print $1, $2, $3, $7}}' {input} | LC_COLLATE=C sort -k1,1 -k2,2n > {output}"

rule bdg2bw:
	input:
		bdg = "{file}.bdg",
		sizes = "hg38.sizes.txt",
	output:
		"{file}.bw",
	shell:
		"bedGraphToBigWig {input.bdg} {input.sizes} {output}"

# Summaries
# ------------------------------------------------------------------------------
rule hicup_summary:
	input:
		script = 'agg-hicup-reports.py',
		data = 'config.tsv',
	output:
		path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
		expand(
			path.join(
				REPORT_DIR, 'HiCUP_summary_report_{sample}.txt'),
			sample=SAMPLES
		)
	shell:
		'python {input.script} {input.data} -o {REPORT_DIR}'

rule multiqc:
	input:
		cfg = path.join(REPORT_DIR, 'multiqc_config.yaml'),
		hicup = path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
		samples = expand(
			path.join(
				REPORT_DIR, 'HiCUP_summary_report_{sample}.txt'),
			sample=SAMPLES
		),
		labels = path.join(REPORT_DIR, "sample-names.tsv"),
	output:
		path.join(REPORT_DIR, 'multiqc_report.html')
	shell:
		'multiqc -f -c {input.cfg} -o {REPORT_DIR} --sample-names {input.labels} {REPORT_DIR}'

rule plot_contact_class:
	input:
		script = "plot-unique.R",
		data = path.join(REPORT_DIR, "hicup_dedup_plot.tsv")
	output:
		path.join(REPORT_DIR, "hicup_class.png")
	shell:
		"Rscript {input.script}"
