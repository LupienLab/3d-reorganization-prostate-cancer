# =============================================================================
# Configuration
# =============================================================================
import pandas as pd
import os.path as path

CONFIG = pd.read_csv("config.tsv", index_col=False, sep="\t")
CONFIG = CONFIG.loc[CONFIG.Include == "Yes", :]

REPORT_DIR = "Reports"
ALIGN_DIR = "Aligned"
CONTACT_DIR = "Contacts"
LOOP_DIR = "Loops"
RAW_DATA_DIR = path.join("..", "..", "Raw")
BATCHES = {
    "Malignant": ["190509_A00827_0007_AHKYH3DSXX_HiC", "190605_A00827_0009_BHLGJ3DSXX_HiC"],
    "Benign": ["191213_A00827_0097_BHMV2YDMXX_HiC", "191220_A00827_0104_AHMW25DMXX_HiC"],
}

SAMPLES = CONFIG["Sample"].tolist()

CHRS = ["chr" + str(i) for i in list(range(1, 23)) + ["X", "Y"]]

RESOLUTIONS = [
    2000, 3000, 4000, 5000,
    10000, 20000, 30000, 40000, 50000,
    100000, 200000, 300000, 400000, 500000,
    1000000, 2000000, 3000000, 4000000, 5000000
]

wildcard_constraints:
    sample = "(PCa|Benign-Prostate-)[0-9]+",
    read = "[1-2]",
    res = "[0-9]+"

# =============================================================================
# Meta Rules
# =============================================================================
rule all:
    input:
        # expand(
        #     path.join(REPORT_DIR, "{sample}.balanced_report.txt"),
        #     sample=SAMPLES
        # ),
        # expand(
        #     path.join(CONTACT_DIR, "{sample}.mcool"),
        #     sample=SAMPLES
        # ),
        # expand(
        #     path.join(CONTACT_DIR, "{sample}.compartments.cis.{ext}"),
        #     sample=SAMPLES,
        #     ext=["bw", "lam.txt", ".vecs.tsv"],
        # ),
        expand(
			path.join(LOOP_DIR, "{sample}.res_{res}bp.loops.bedpe"),
            sample=SAMPLES,
			res=[10000],
        ),

rule rulegraph:
    output:
        "rulegraph.png",
    shell:
        "snakemake --rulegraph | dot -Tpng > {output}"

# =============================================================================
# Rules
# =============================================================================
# Contact matrices
# ------------------------------------------------------------------------------
rule merge_coolers_tumour:
    input:
        path.join(RAW_DATA_DIR, BATCHES["Malignant"][0], "Contacts", "{sample}.cool"),
        path.join(RAW_DATA_DIR, BATCHES["Malignant"][1], "Contacts", "{sample}.cool"),
    output:
        temp(path.join(CONTACT_DIR, "{sample}.cool")),
    wildcard_constraints:
        sample="PCa\d+"
    shell:
        "cooler merge {output} {input[0]} {input[1]}"

rule merge_coolers_benign:
    input:
        path.join(RAW_DATA_DIR, BATCHES["Benign"][0], "Contacts", "{sample}.cool"),
        path.join(RAW_DATA_DIR, BATCHES["Benign"][1], "Contacts", "{sample}.cool"),
    output:
        temp(path.join(CONTACT_DIR, "{sample}.cool")),
    wildcard_constraints:
        sample="Benign-Prostate-\d+"
    shell:
        "cooler merge {output} {input[0]} {input[1]}"

rule balance:
    input:
        path.join(CONTACT_DIR, "{sample}.cool")
    output:
        path.join(REPORT_DIR, "{sample}.balanced_report.txt")
    shell:
        "cooler balance {input} >> {output} 2>&1"

rule adjust_res:
    input:
        path.join(CONTACT_DIR, "{sample}.cool")
    output:
        path.join(CONTACT_DIR, "{sample}.mcool")
    params:
        "--balance -p 8 -r {}".format(",".join([str(r) for r in RESOLUTIONS]))
    shell:
        "cooler zoomify {params} -o {output} {input}"

rule compartments:
    input:
        cool = path.join(CONTACT_DIR, "{sample}.mcool"),
    output:
        path.join(CONTACT_DIR, "{sample}.compartments.cis.bw"),
        path.join(CONTACT_DIR, "{sample}.compartments.cis.lam.txt"),
        path.join(CONTACT_DIR, "{sample}.compartments.cis.vecs.tsv"),
    params:
        options = "--bigwig",
        res = 40000
    shell:
        "cooltools call-compartments {params.options} -o {CONTACT_DIR}/{wildcards.sample}.compartments {input.cool}::/resolutions/{params.res}"

rule calc_expected:
	input:
		path.join(CONTACT_DIR, "{sample}.mcool")
	output:
		path.join(CONTACT_DIR, "{sample}.res_{res}bp.expected.tsv"),
	threads: 8
	shell:
		"cooltools compute-expected -p {threads} -o {output} {input}::/resolutions/{wildcards.res}"

rule call_dots:
	input:
		cool = path.join(CONTACT_DIR, "{sample}.mcool"),
		exp = path.join(CONTACT_DIR, "{sample}.res_{res}bp.expected.tsv"),
	output:
		path.join(LOOP_DIR, "{sample}.res_{res}bp.loops.bedpe"),
	threads: 8
	shell:
		"cooltools call-dots -p {threads} -o {output} {input.cool}::/resolutions/{wildcards.res} {input.exp}"


# Summaries
# ------------------------------------------------------------------------------
rule hicup_summary:
    input:
        script = 'agg-hicup-reports.py',
        data = 'config.tsv',
    output:
        path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
        expand(
            path.join(
                REPORT_DIR, 'HiCUP_summary_report_{sample}.txt'),
            sample=SAMPLES
        )
    shell:
        'python {input.script} {input.data} -o {REPORT_DIR}'

rule multiqc:
    input:
        cfg = path.join(REPORT_DIR, 'multiqc_config.yaml'),
        hicup = path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
        samples = expand(
            path.join(
                REPORT_DIR, 'HiCUP_summary_report_{sample}.txt'),
            sample=SAMPLES
        )
    output:
        path.join(REPORT_DIR, 'multiqc_report.html')
    shell:
        'multiqc -f -c {input.cfg} -o {REPORT_DIR} {REPORT_DIR}'

rule plot_contact_class:
    input:
        script = "plot-unique.R",
        data = path.join(REPORT_DIR, "hicup_dedup_plot.tsv")
    output:
        path.join(REPORT_DIR, "hicup_class.png")
    shell:
        "Rscript {input.script}"

