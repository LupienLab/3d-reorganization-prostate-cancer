import pandas as pd
import os.path as path

# =============================================================================
# Configuration
# =============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')
CONFIG = CONFIG.loc[~CONFIG.Sample.str.startswith('#'), :]

REPORT_DIR = 'Reports'
ALIGN_DIR = 'Aligned'
CONTACT_DIR = 'Contacts'
RAW_DATA_DIR = path.join('..', '..', 'Raw')
BATCHES = ['190509_A00827_0007_AHKYH3DSXX', '190605_A00827_0009_BHLGJ3DSXX']

SAMPLES = CONFIG['Sample'].tolist()
READS = [1, 2]
LANES = [1, 2, 3, 4]

BWT2_IDX = '/cluster/tools/data/genomes/human/hg38/iGenomes/Sequence/Bowtie2Index/genome'

CHRS = ['chr' + str(i) for i in list(range(1, 23)) + ['X', 'Y']]

RESOLUTIONS = [
    2000, 3000, 4000, 5000,
    10000, 20000, 30000, 40000, 50000,
    100000, 200000, 300000, 400000, 500000,
    1000000, 2000000, 3000000, 4000000, 5000000
]

wildcard_constraints:
    sample = 'PCa[0-9]+',
    lane = '[1-4]',
    read = '[1-2]',
    res = '[0-9]+'

# =============================================================================
# Meta Rules
# =============================================================================
rule all:
    input:
        'rulegraph.png',
    expand(
        path.join(ALIGN_DIR, '{sample}.agg.hicup.name-sorted.bam'),
        sample=SAMPLES
    ),
    expand(
        path.join(ALIGN_DIR, '{sample}.agg.hicup.sorted.bam'),
        sample=SAMPLES
    ),
    expand(
        path.join(CONTACT_DIR, '{sample}.cool'),
        sample=SAMPLES
    ),
    expand(
        path.join(CONTACT_DIR, '{sample}.mcool'),
        sample=SAMPLES
    ),
    path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
    path.join(REPORT_DIR, 'multiqc_report.html'),
    path.join(REPORT_DIR, "hicup_class.png")

rule rulegraph:
    output:
        'rulegraph.png',
    shell:
        'snakemake --rulegraph | dot -Tpng > {output}'

# =============================================================================
# Rules
# =============================================================================
rule merge_bams:
    # aggregate data from this run and previous flow cell
    input:
        path.join(
            RAW_DATA_DIR, BATCHES[0], ALIGN_DIR,
            '{{sample}}.hicup.name-sorted.bam'
        ),
        expand(
            path.join(
                RAW_DATA_DIR, BATCHES[1], ALIGN_DIR,
                '{{sample}}_L00{lane}.hicup.name-sorted.bam'
            ),
            lane=LANES
        )
    output:
        path.join(ALIGN_DIR, '{sample}.agg.hicup.name-sorted.bam')
    shell:
        'sambamba merge -t 8 -p {output} {input}'

# Contact matrices
# ------------------------------------------------------------------------------
rule create_pairs:
    input:
        genome = 'hg38.sizes.txt',
        bam = path.join(ALIGN_DIR, '{sample}.agg.hicup.name-sorted.bam')
    output:
        path.join(CONTACT_DIR, '{sample}.pairs.gz')
    shell:
        'pairtools parse -c {input.genome} --assembly hg38 -o {output} {input.bam}'

rule create_cooler:
    input:
        genome = 'hg38.sizes.txt',
        pairs = path.join(CONTACT_DIR, '{sample}.pairs.gz')
    output:
        path.join(CONTACT_DIR, '{sample}.cool')
    params:
        '--assembly hg38 -c1 2 -p1 3 -c2 4 -p2 5'
    shell:
        'cooler cload pairs {params} {input.genome}:1000 {input.pairs} {output}'

rule balance:
    input:
        path.join(CONTACT_DIR, '{sample}.cool')
    output:
        path.join(REPORT_DIR, '{sample}.balanced_report.txt')
    shell:
        'cooler balance {input} >> {output} 2>&1'

rule adjust_res:
    input:
        path.join(CONTACT_DIR, '{sample}.cool')
    output:
        path.join(CONTACT_DIR, '{sample}.mcool')
    params:
        '--balance -p 8 -r {}'.format(','.join([str(r) for r in RESOLUTIONS]))
    shell:
        'cooler zoomify {params} -o {output} {input}'


# Summaries
# ------------------------------------------------------------------------------
rule hicup_summary:
    input:
        script = 'agg-hicup-reports.py',
        data = 'config.tsv',
    output:
        path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
        expand(
            path.join(
                REPORT_DIR, 'HiCUP_summary_report_{sample}.txt'),
            sample=SAMPLES
        )
    shell:
        'python {input.script} {input.data} -o {REPORT_DIR}'

rule multiqc:
    input:
        cfg = path.join(REPORT_DIR, 'multiqc_config.yaml'),
        hicup = path.join(REPORT_DIR, 'HiCUP_summary_report.tsv'),
        samples = expand(
            path.join(
                REPORT_DIR, 'HiCUP_summary_report_{sample}.txt'),
            sample=SAMPLES
        )
    output:
        path.join(REPORT_DIR, 'multiqc_report.html')
    shell:
        'multiqc -f -c {input.cfg} -o {REPORT_DIR} {REPORT_DIR}'

rule plot_contact_class:
    input:
        script = "plot-unique.R",
        data = path.join(REPORT_DIR, "hicup_dedup_plot.tsv")
    output:
        path.join(REPORT_DIR, "hicup_class.png")
    shell:
        "Rscript {input.script}"
