import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')

BAM_DIR = 'BAMs'
PEAK_DIR = 'Peaks'
REPORT_DIR = 'Reports'

SAMPLES = ['Pca' + str(i) for i in CONFIG['Sample ID'].tolist()]
CHIPS = CONFIG['ChIP Type'].tolist()

GENOMES = ['hg38']
CHR_REGEX = "^chr[0-9]{0,3}[XYM]?\\t"

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join(BAM_DIR, '{sample}_{chip}.sorted.dedup.bam'),
            zip,
            sample=SAMPLES,
            chip=CHIPS
        ),
        expand(
            path.join(PEAK_DIR, '{sample}_peaks.narrowPeak'),
            sample=SAMPLES
        ),
        expand(
            path.join(PEAK_DIR, '{sample}_peaks.filtered.{ext}'),
            sample=SAMPLES,
            ext=["narrowPeak", "bdg"],
        ),
        expand(
            path.join(PEAK_DIR, '{sample}_treat_pileup.filtered.{ext}'),
            sample=SAMPLES,
            ext=["bdg", "bw"],
        ),

# ==============================================================================
# Rules
# ==============================================================================
rule call_peaks:
    input:
        chip = path.join(BAM_DIR, '{sample}_H3K27ac.sorted.dedup.bam'),
        input = path.join(BAM_DIR, '{sample}_input.sorted.dedup.bam'),
    output:
        path.join(PEAK_DIR, '{sample}_peaks.xls'),
        path.join(PEAK_DIR, '{sample}_peaks.narrowPeak'),
        path.join(PEAK_DIR, '{sample}_summits.bed')
    params:
        lambda wildcards:
            ' '.join([
                '-g hs',
                '-f BAM',
                '-q 0.005',
                '-B',
                '-n {}'.format(path.join(PEAK_DIR, wildcards.sample))
            ])
    conda:
        'macs.yaml'
    shell:
        'macs2 callpeak {params} -t {input.chip} -c {input.input}'

rule filter_blacklist_noncanonical:
    input:
        blacklist = 'ENCODE-blacklist.bed',
        peaks = path.join(PEAK_DIR, '{sample}_{type}.{ext}')
    output:
        path.join(PEAK_DIR, '{sample}_{type}.filtered.{ext}')
    wildcard_constraints:
        sample = "Pca\d+",
        type = "[^.]+",
        ext = "[^.]+",
    shell:
        # remove blacklist regions and only keep canonical chromosomes
        "bedtools intersect -v -a {input.peaks} -b {input.blacklist} | awk '/{CHR_REGEX}/ {{print}}' | LC_COLLATE=C sort -k1,1 -k2,2n > {output}"

rule narrowPeak2bedGraph:
    input:
        path.join(PEAK_DIR, '{sample}_peaks.filtered.narrowPeak')
    output:
        path.join(PEAK_DIR, '{sample}_peaks.filtered.bdg')
    shell:
        "awk '{{FS=OFS=\"\\t\"}}{{print $1, $2, $3, $5}}' {input} > {output}"

rule bdg_to_bigwig:
    input:
        bed = path.join(PEAK_DIR, '{sample}_treat_pileup.filtered.bdg'),
        genome = path.join("..", "2019-06-18_PCa-LowC-sequencing/hg38.sizes.txt"),
    output:
        path.join(PEAK_DIR, '{sample}_treat_pileup.filtered.bw')
    shell:
        "bedGraphToBigWig {input.bed} {input.genome} {output}"
