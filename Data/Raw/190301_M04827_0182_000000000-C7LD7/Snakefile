import pandas as pd
import os.path as path

# =============================================================================
# Configuration
# =============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')

FASTQ_DIR = 'FASTQs'
REPORT_DIR = 'Reports'
ALIGN_DIR = 'Aligned'

SAMPLES = CONFIG['Sample'].tolist()

BWT2_IDX = path.join('..', '..', 'External', 'hg19_Bowtie2Index', 'genome')

wildcard_constraints:
    sample = '[A-Za-z0-9-]+',
    read = '[1-2]'

# =============================================================================
# Meta Rules
# =============================================================================
rule all_fastqc:
    input:
        expand(
            path.join(REPORT_DIR, '{sample}_R{read}_fastqc.html'),
            sample=SAMPLES,
            read=[1, 2]
        )

rule all_align:
    input:
        expand(
            path.join(ALIGN_DIR, '{sample}_R{read}.{ext}'),
            sample=SAMPLES,
            read=[1, 2],
            ext=['name-sorted.bam']
        ),
        expand(
            path.join(ALIGN_DIR, '{sample}.{ext}'),
            sample=SAMPLES,
            ext=['bam', 'filtered.bam', 'filtered.dedup.bam']
        ),

# =============================================================================
# Rules
# =============================================================================
# FastQC
# -----------------------------------------------------------------------------
rule fastqc:
    input:
        path.join(FASTQ_DIR, '{sample}_R{read}.fastq.gz')
    output:
        path.join(REPORT_DIR, '{sample}_R{read}_fastqc.html'),
        path.join(REPORT_DIR, '{sample}_R{read}_fastqc.zip')
    params:
        '-o {}'.format(REPORT_DIR)
    shell:
        'fastqc {params} {input}'


# Alignment
# -----------------------------------------------------------------------------
rule hicup:
    input:
        r1 = path.join(FASTQ_DIR, '{sample}_R1.fastq.gz'),
        r2 = path.join(FASTQ_DIR, '{sample}_R2.fastq.gz'),
        digest = path.join('..', '..', 'Processed',
                           'HiCUP_hg19_digested',
                           'Digest_hg19_HindIII_None.txt')
    output:
        protected(path.join(ALIGN_DIR, '{sample}_R1_2.filt.bam')),
        protected(path.join(ALIGN_DIR, '{sample}_R1_2.hicup.bam')),
        protected(path.join(ALIGN_DIR, '{sample}_R1_2.pair.bam'))
    params:
        ' '.join([
            '--outdir={}/'.format(ALIGN_DIR),
            '--temp {}'.format(path.join(ALIGN_DIR, 'HiCUP_temp')),
            '--index {}'.format(BWT2_IDX),
            '--bowtie2',
            '--keep',
            '--zip'
        ])
    shell:
        'hicup --digest {input.digest} {params} {input.r1} {input.r2}'

rule rename_hicup:
    input:
        path.join(ALIGN_DIR, '{sample}_R1_2.HiCUP_summary_report.html')
    output:
        path.join(REPORT_DIR, '{sample}_R1_2.HiCUP_summary_report.html')
    shell:
        'mv {input} {output}'


# Miscellaneous
# -----------------------------------------------------------------------------
rule sort_bam_name:
    input:
        path.join(ALIGN_DIR, '{file}.bam')
    output:
        bam = path.join(ALIGN_DIR, '{file}.name-sorted.bam'),
        idx = path.join(ALIGN_DIR, '{file}.name-sorted.bam.bai')
    shell:
        'sambamba sort -n -p -o {output.bam} {input}'

rule sort_bam:
    input:
        path.join(ALIGN_DIR, '{file}.bam')
    output:
        bam = path.join(ALIGN_DIR, '{file}.sorted.bam'),
        idx = path.join(ALIGN_DIR, '{file}.sorted.bam.bai')
    shell:
        'sambamba sort -p {input}'
