import pandas as pd
import os.path as path

# =============================================================================
# Configuration
# =============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')

FASTQ_DIR = 'FASTQs'
REPORT_DIR = 'Reports'
ALIGN_DIR = 'Aligned'
CONTACT_DIR = 'Contacts'

SAMPLES = CONFIG.apply(
    lambda x:
        '%s_S%s_L00%s' % (x['Sample'], x['Sample Number'], x['Lane Number']),
    axis=1
).tolist()

BWT2_IDX = path.join('..', '..', 'External', 'hg19_Bowtie2Index', 'genome')

CHRS = ['chr' + str(i) for i in list(range(1, 23)) + ['X', 'Y']]
RESOLUTIONS = ([i * (10 ** 4) for i in range(2, 10)] +
               [i * (10 ** 5) for i in range(1, 10)] + [10 ** 6])

wildcard_constraints:
    sample = '[A-Za-z0-9-]+_S\d_L00\d',
    read = '[1-2]',
    res = '[0-9]+'

# =============================================================================
# Meta Rules
# =============================================================================
rule all_fastqc:
    input:
        expand(
            path.join(REPORT_DIR, '{sample}_R{read}_fastqc.html'),
            sample=SAMPLES,
            read=[1, 2]
        )

rule all_align:
    input:
        expand(
            path.join(ALIGN_DIR, '{sample}_R1_2.hicup.{ext}'),
            sample=SAMPLES,
            read=[1, 2],
            ext=['name-sorted.bam']
        )

# =============================================================================
# Rules
# =============================================================================
# FastQC
# -----------------------------------------------------------------------------
rule fastqc:
    input:
        path.join(FASTQ_DIR, '{sample}_R{read}.fastq.gz')
    output:
        path.join(REPORT_DIR, '{sample}_R{read}_fastqc.html'),
        path.join(REPORT_DIR, '{sample}_R{read}_fastqc.zip')
    params:
        '-o {}'.format(REPORT_DIR)
    shell:
        'fastqc {params} {input}'


# Alignment
# -----------------------------------------------------------------------------
rule hicup:
    input:
        r1 = path.join(FASTQ_DIR, '{sample}_R1.fastq.gz'),
        r2 = path.join(FASTQ_DIR, '{sample}_R2.fastq.gz'),
        digest = path.join('..', '..', 'Processed',
                           'HiCUP_digested',
                           'Digest_hg19_MboI_None.txt')
    output:
        protected(path.join(ALIGN_DIR, '{sample}_R1_2.hicup.bam'))
    params:
        ' '.join([
            '--outdir={}/'.format(ALIGN_DIR),
            '--temp {}'.format(path.join(ALIGN_DIR, 'HiCUP_temp')),
            '--index {}'.format(BWT2_IDX),
            '--bowtie2',
            '--zip'
        ])
    shell:
        'hicup --digest {input.digest} {params} {input.r1} {input.r2}'

rule rename_hicup:
    input:
        path.join(ALIGN_DIR, '{sample}_R1_2.HiCUP_summary_report.html')
    output:
        path.join(REPORT_DIR, '{sample}.HiCUP_summary_report.html')
    shell:
        'mv {input} {output}'

# Miscellaneous
# -----------------------------------------------------------------------------
rule sort_bam_name:
    input:
        path.join(ALIGN_DIR, '{file}.bam')
    output:
        bam = path.join(ALIGN_DIR, '{file}.name-sorted.bam'),
        idx = path.join(ALIGN_DIR, '{file}.name-sorted.bam.bai')
    shell:
        'sambamba sort -n -p -o {output.bam} {input}'

rule sort_bam:
    input:
        path.join(ALIGN_DIR, '{file}.bam')
    output:
        bam = path.join(ALIGN_DIR, '{file}.sorted.bam'),
        idx = path.join(ALIGN_DIR, '{file}.sorted.bam.bai')
    shell:
        'sambamba sort -p {input}'
