import pandas as pd
import os.path as path

# =============================================================================
# Configuration
# =============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')

FASTQ_DIR = 'FASTQs'
REPORT_DIR = 'Reports'
ALIGN_DIR = 'Aligned'
CONTACT_DIR = 'Contacts'
TAD_DIR = 'TADs'
PLOT_DIR = 'Plots'

SAMPLES = CONFIG['Sample'].tolist()
READS = [1, 2]

BWT2_IDX = '/cluster/tools/data/genomes/human/hg38/iGenomes/Sequence/Bowtie2Index/genome'

CHRS = ['chr' + str(i) for i in list(range(1, 23)) + ['X', 'Y']]
RESOLUTIONS = ([i * (10 ** 4) for i in range(2, 10)] +
               [i * (10 ** 5) for i in range(1, 10)] + [10 ** 6])

wildcard_constraints:
    sample = '[A-Za-z0-9-]+',
    read = '[1-2]',
    res = '[0-9]+'

# =============================================================================
# Meta Rules
# =============================================================================
rule all:
    input:
        expand(
            path.join(REPORT_DIR, '{sample}_R{read}_fastqc.html'),
            sample=SAMPLES,
            read=READS
        ),
        expand(
            path.join(ALIGN_DIR, '{sample}.hicup.sorted.bam'),
            sample=SAMPLES,
            read=READS
        )

# =============================================================================
# Rules
# =============================================================================
# FastQC
# -----------------------------------------------------------------------------
rule fastqc:
    input:
        path.join(FASTQ_DIR, '{sample}_R{read}.fastq.gz')
    output:
        path.join(REPORT_DIR, '{sample}_R{read}_fastqc.html'),
        path.join(REPORT_DIR, '{sample}_R{read}_fastqc.zip')
    params:
        '-o {}'.format(REPORT_DIR)
    shell:
        'fastqc {params} {input}'


# HiCUP
# -----------------------------------------------------------------------------
rule hicup_truncate:
    input:
        r1 = path.join(FASTQ_DIR, '{sample}_R1.fastq.gz'),
        r2 = path.join(FASTQ_DIR, '{sample}_R2.fastq.gz'),
    output:
        path.join(FASTQ_DIR, '{sample}_R1.trunc.fastq.gz'),
        path.join(FASTQ_DIR, '{sample}_R2.trunc.fastq.gz'),
    shell:
        'hicup_truncater --re1 ^GATC,MboI --outdir {FASTQ_DIR} --threads 2 {input.r1} {input.r2}'

rule hicup_map:
    input:
        r1 = path.join(FASTQ_DIR, '{sample}_R1.trunc.fastq.gz'),
        r2 = path.join(FASTQ_DIR, '{sample}_R2.trunc.fastq.gz'),
        digest = path.join('..', 'HiCUP_digested', 'Digest_hg38_MboI_None.txt')
    output:
        path.join(ALIGN_DIR, '{sample}_R1_2.pair.bam')
    params:
        ' '.join([
            '--zip',
            '--threads 8',
            '--bowtie2 bowtie2',
            '--outdir={}/'.format(ALIGN_DIR),
            '--index {}'.format(BWT2_IDX)
        ])
    shell:
        'hicup_mapper {params} {input.r1} {input.r2}'

rule hicup_filter:
    input:
        bam = path.join(ALIGN_DIR, '{sample}_R1_2.pair.bam'),
        digest = path.join('..', 'HiCUP_digested', 'Digest_hg38_MboI_None.txt')
    output:
        path.join(ALIGN_DIR, '{sample}_R1_2.filt.bam')
    params:
        ' '.join([
            '--threads 8',
            '--zip',
            '--outdir {}'.format(ALIGN_DIR)
        ])
    shell:
        'hicup_filter {params} --digest {input.digest} {input.bam}'

rule hicup_dedup:
    input:
        path.join(ALIGN_DIR, '{sample}_R1_2.filt.bam')
    output:
        path.join(ALIGN_DIR, '{sample}_R1_2.dedup.bam')
    params:
        ' '.join([
            '--zip',
            '--outdir {}'.format(ALIGN_DIR),
            '--threads 8'
        ])
    shell:
        'hicup_deduplicator {params} {input}'

rule repair_header:
    input:
        path.join(ALIGN_DIR, '{sample}_R1_2.dedup.bam')
    output:
        path.join(ALIGN_DIR, '{sample}.hicup.bam')
    shell:
        # HiCUP deduplicator doesn't properly add a line to the header of the BAM, so I'm fixing it here
        'samtools view -H {input} | sed "s/HiCUP Deduplicator/ID\:HiCUP Deduplicator/" | samtools reheader -P - {input} > {output}'

# Miscellaneous
# -----------------------------------------------------------------------------
rule sort_bam_name:
    input:
        '{file}.bam'
    output:
        '{file}.name-sorted.bam',
    shell:
        'sambamba sort -n -p -o {output} {input}'

rule sort_bam:
    input:
        '{file}.bam'
    output:
        bam = '{file}.sorted.bam',
        idx = '{file}.sorted.bam.bai'
    shell:
        'sambamba sort -p {input}'
