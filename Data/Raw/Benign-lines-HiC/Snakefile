import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv("config.tsv", sep="\t", index_col=False)

REPORT_DIR = "Reports"
FASTQ_DIR = "FASTQs"
ALIGN_DIR = "Aligned"
CONTACT_DIR = "Contacts"

SAMPLES = CONFIG["Accession"].tolist()
READS = [1, 2]
LANES = [1, 2, 3, 4]
BWT2_IDX = "/mnt/work1/data/genomes/human/hg38/iGenomes/Sequence/Bowtie2Index/genome"
CHRS = ["chr" + str(i) for i in list(range(1, 23)) + ["X", "Y"]]

RESOLUTIONS = [
    2000, 3000, 4000, 5000,
    10000, 20000, 30000, 40000, 50000,
    100000, 200000, 300000, 400000, 500000,
    1000000, 2000000, 3000000, 4000000, 5000000
]

wildcard_constraints:
    sample = "[A-Za-z0-9-]+",
    lane = "[1-4]",
    read = "[1-2]"


# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(path.join(FASTQ_DIR, "{sample}.fastq.gz"), sample=SAMPLES),
        expand(path.join(FASTQ_DIR, "{sample}_R{read}.fastq.gz"), sample=SAMPLES, read=[1, 2]),


# ==============================================================================
# Rules
# ==============================================================================
rule download:
    output:
        path.join(FASTQ_DIR, "{sample}.fastq.gz")
    params:
        "--gzip"
    shell:
        "fastq-dump {wildcards.sample} {params} -O {FASTQ_DIR}"

rule split_concat_fastq:
    input:
        script = "split-sra.py",
        data = path.join(FASTQ_DIR, "{sample}.fastq.gz")
    output:
        path.join(FASTQ_DIR, "{sample}_R1.fastq.gz"),
        path.join(FASTQ_DIR, "{sample}_R2.fastq.gz"),
    params:
        prefix = lambda wildcards: path.join(FASTQ_DIR, wildcards.sample),
        l = lambda wildcards: CONFIG.loc[CONFIG["Accession"] == wildcards.sample, :].iat[0, 4]
    shell:
        "python {input.script} {input.data} {params.l} -o {params.prefix}"

rule fastqc:
    input:
        path.join(FASTQ_DIR, "{sample}_R{read}.fastq.gz"),
    output:
        path.join(REPORT_DIR, "{sample}_R{read}_fastqc.html"),
        path.join(REPORT_DIR, "{sample}_R{read}_fastqc.zip"),
    shell:
        "fastqc {input} -o {REPORT_DIR}"
