import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv("config.tsv", index_col=False, sep="\t")
CONFIG = CONFIG.loc[CONFIG.Include == "Yes", :]

REPORT_DIR = "Reports"
CONTACT_DIR = "downsampled-contacts"
TMP_DIR = "TMP"
TAD_DIR = "TADs"
PLOT_DIR = "Plots"

SAMPLES = CONFIG.SampleID.tolist()
WINDOWS = range(3, 41)


# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join("Contacts", "{sample}.mcool"),
            sample=SAMPLES,
        ),
        expand(
            path.join(CONTACT_DIR, "{sample}.{count}.cool"),
            sample=SAMPLES,
            count=[300000000],
        ),
        expand(
            path.join(TAD_DIR, "w_{w}", "{sample}.40000bp.domains.tsv"),
            w=WINDOWS,
            sample=SAMPLES,
        ),
        expand(
            path.join(TAD_DIR, "resolved-TADs", "{sample}.40000bp.aggregated-{ext}"),
            sample=SAMPLES,
            ext=["domains.bedGraph", "boundaries.tsv"],
        )


# ==============================================================================
# Rules
# ==============================================================================
rule link:
    input:
        "config.tsv",
    output:
        path.join("Contacts", "{sample}.mcool"),
    params:
        src = lambda wildcards: CONFIG.loc[CONFIG.SampleID == wildcards.sample, "Contact_File"].values[0]
    shell:
        "pushd Contacts; ln -s ../{params.src} {wildcards.sample}.mcool; popd"

rule downsample:
    input:
        path.join("Contacts", "{sample}.mcool"),
    output:
        path.join(CONTACT_DIR, "{sample}.{count}.cool"),
    shell:
        "cooltools random-sample -c {wildcards.count} {input}::/resolutions/40000 {output}"

rule dump_mat:
    input:
        path.join(CONTACT_DIR, "{sample}.300000000.cool")
    output:
        path.join(TMP_DIR, "{sample}.{res}bp.annotated.mtx")
    params:
        "-H -b --one-based-ids --annotate chrom,start,end"
    shell:
        "cooler dump {params} -r chr19 -o {output} {input}"

rule call_tads:
    input:
        script = "calc-tads.R",
        topdom = "topdom.R",
        data = path.join(TMP_DIR, "{sample}.{res}bp.annotated.mtx")
    output:
        path.join(TAD_DIR, "w_{window}", "{sample}.{res}bp.bins-signal.tsv"),
        path.join(TAD_DIR, "w_{window}", "{sample}.{res}bp.domains.tsv"),
        path.join(TAD_DIR, "w_{window}", "{sample}.{res}bp.domains.bed"),
    params:
        lambda wildcards: path.join(
            TAD_DIR,
            "w_{}".format(wildcards.window),
            ".".join([wildcards.sample, wildcards.res + "bp"])
        )
    shell:
        "Rscript {input.script} {input.data} -p {params} -w {wildcards.window}"

rule agg_tads:
    input:
        script = "aggregate-TADs.R",
        tads = expand(
            path.join(TAD_DIR, "w_{w}", "{{sample}}.40000bp.domains.bed"),
            w=WINDOWS,
        )
    output:
        path.join(TAD_DIR, "resolved-TADs", "{sample}.40000bp.aggregated-domains.bedGraph"),
        path.join(TAD_DIR, "resolved-TADs", "{sample}.40000bp.aggregated-boundaries.tsv"),
    shell:
        "Rscript {input.script} {wildcards.sample} -p {TAD_DIR}/resolved-TADs/{wildcards.sample}.40000bp --in-dir {TAD_DIR}"
