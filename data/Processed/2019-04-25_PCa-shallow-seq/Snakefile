import pandas as pd
import os.path as path

# =============================================================================
# Configuration
# =============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')

FASTQ_DIR = 'FASTQs'
REPORT_DIR = 'Reports'
ALIGN_DIR = 'Aligned'
CONTACT_DIR = 'Contacts'

SAMPLES = CONFIG['Sample'].tolist()
LANES = [1, 2, 3, 4]
READS = [1, 2]

BWT2_IDX = '/cluster/tools/data/genomes/human/hg38/iGenomes/Sequence/Bowtie2Index/genome'

CHRS = ['chr' + str(i) for i in list(range(1, 23)) + ['X', 'Y']]
RESOLUTIONS = ([i * (10 ** 4) for i in range(2, 10)] +
               [i * (10 ** 5) for i in range(1, 10)] + [10 ** 6])

wildcard_constraints:
    sample = '[A-Za-z0-9-]+',
    read = '[1-2]',
    res = '[0-9]+'

# =============================================================================
# Meta Rules
# =============================================================================
rule all:
    input:
        expand(
            path.join(REPORT_DIR, '{sample}_L00{lane}_R{read}_fastqc.html'),
            sample=SAMPLES,
            read=READS,
            lane=LANES
        ),
        expand(
            path.join(ALIGN_DIR, '{sample}_L00{lane}_R1_2.hicup.name-sorted.bam'),
            sample=SAMPLES,
            read=READS,
            lane=LANES
        ),
        expand(
            path.join(ALIGN_DIR, '{sample}.hicup.merged.bam'),
            sample=SAMPLES,
            read=READS,
            lane=LANES
        ),
        expand(
            path.join(CONTACT_DIR, '{sample}.{res}bp.{ext}'),
            sample=SAMPLES,
            res=RESOLUTIONS,
            ext=[
                'raw.sparse.mtx',
                'ice-corrected.sparse.mtx',
                'bins.bed',
                'bins-signal.tsv',
                'domains.tsv',
                'domains.bed'
            ]
        ),
#         expand(
#             path.join(CONTACT_DIR, '{sample}.{res}bp.{chrom}.{ext}'),
#             sample=SAMPLES,
#             res=RESOLUTIONS,
#             chrom=CHRS,
#             ext=['raw.pdf', 'ice-corrected.pdf', 'ice-corrected-with-TADs.pdf']
#         )

# =============================================================================
# Rules
# =============================================================================
# FastQC
# -----------------------------------------------------------------------------
rule fastqc:
    input:
        path.join(FASTQ_DIR, '{sample}_L00{lane}_R{read}.fastq.gz')
    output:
        path.join(REPORT_DIR, '{sample}_L00{lane}_R{read}_fastqc.html'),
        path.join(REPORT_DIR, '{sample}_L00{lane}_R{read}_fastqc.zip')
    params:
        '-o {}'.format(REPORT_DIR)
    shell:
        'fastqc {params} {input}'


# Alignment
# -----------------------------------------------------------------------------
rule hicup:
    input:
        r1 = path.join(FASTQ_DIR, '{sample}_L00{lane}_R1.fastq.gz'),
        r2 = path.join(FASTQ_DIR, '{sample}_L00{lane}_R2.fastq.gz'),
        digest = path.join('..', 'HiCUP_digested',
                           'Digest_hg38_MboI_None.txt')
    output:
        path.join(ALIGN_DIR, '{sample}_L00{lane}_R1_2.hicup.bam')
    params:
        ' '.join([
            '--zip',
            '--bowtie2 bowtie2',
            '--outdir={}/'.format(ALIGN_DIR),
            '--temp {}'.format(path.join(ALIGN_DIR, 'HiCUP_temp')),
            '--index {}'.format(BWT2_IDX)
        ])
    shell:
        'hicup --digest {input.digest} {params} {input.r1} {input.r2}'

rule rename_hicup:
    input:
        path.join(ALIGN_DIR, '{sample}_L00{lane}_R1_2.HiCUP_summary_report.html')
    output:
        path.join(REPORT_DIR, '{sample}_L00{lane}.HiCUP_summary_report.html')
    shell:
        'mv {input} {output}'

rule call_tads:
    input:
        script = path.join('/cluster', 'projects', 'lupiengroup',
                           'People', 'hawleyj', 'Davos', 'Src',
                           'Pipeline', 'calc-contact-matrices.R'),
        data = path.join(ALIGN_DIR, '{sample}.hicup.merged.bam')
    output:
        path.join(CONTACT_DIR, '{sample}.{res}bp.raw.sparse.mtx'),
        path.join(CONTACT_DIR, '{sample}.{res}bp.ice-corrected.sparse.mtx'),
        path.join(CONTACT_DIR, '{sample}.{res}bp.bins.bed'),
        path.join(CONTACT_DIR, '{sample}.{res}bp.bins-signal.tsv'),
        path.join(CONTACT_DIR, '{sample}.{res}bp.domains.tsv'),
        path.join(CONTACT_DIR, '{sample}.{res}bp.domains.bed')
    params:
        lambda wildcards: path.join(CONTACT_DIR, wildcards.sample)
    shell:
        'Rscript {input.script} {input.data} {wildcards.res} -p {params}'

# rule plot_tads:
#     input:
#         script = path.join('..', '..', '..', 'Src',
#                            'Pipeline', 'plot-contact-matrices.R'),
#         raw = path.join(CONTACT_DIR, '{sample}.{res}bp.raw.sparse.mtx'),
#         norm = path.join(
#             CONTACT_DIR, '{sample}.{res}bp.ice-corrected.sparse.mtx'),
#         binsig = path.join(CONTACT_DIR, '{sample}.{res}bp.bins-signal.tsv'),
#         doms = path.join(CONTACT_DIR, '{sample}.{res}bp.domains.tsv'),
#     output:
#         expand(
#             path.join(CONTACT_DIR, '{{sample}}.{{res}}bp.{chr}.{plot}.pdf'),
#             chr=CHRS,
#             plot=['raw', 'ice-corrected', 'ice-corrected-with-TADs']
#         )
#     params:
#         lambda wildcards: path.join(CONTACT_DIR, wildcards.sample)
#     shell:
#         'Rscript {input} {wildcards.res} -p {params}'


# Miscellaneous
# -----------------------------------------------------------------------------
rule sort_bam_name:
    input:
        '{file}.bam'
    output:
        '{file}.name-sorted.bam',
    shell:
        'sambamba sort -n -p -o {output} {input}'

rule sort_bam:
    input:
        '{file}.bam'
    output:
        bam = '{file}.sorted.bam',
        idx = '{file}.sorted.bam.bai'
    shell:
        'sambamba sort -p {input}'

rule merge_bam:
    input:
        expand(
            path.join(ALIGN_DIR, '{{sample}}_L00{lane}_R1_2.hicup.name-sorted.bam'),
            lane=LANES
        )
    output:
        protected(path.join(ALIGN_DIR, '{sample}.hicup.merged.bam'))
    shell:
        'sambamba merge -p {output} {input}'

