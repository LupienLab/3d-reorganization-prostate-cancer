import pandas as pd
import os.path as path
import itertools

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv(
    path.join("..", "..", "External", "LowC_Samples_Data_Available.tsv"),
    index_col=False, sep="\t"
)
SAMPLES = ["PCa" + str(pid) for pid in CONFIG.loc[CONFIG.Include == "Yes", "Sample ID"]]
CHRS = ["chr" + str(i) for i in list(range(1, 23)) + ["X", "Y"]]

LOCI = pd.read_csv("loci.bed", sep="\t", index_col=False, header=0)
LOCI_STR = (LOCI["chr"].astype(str) + "_" + LOCI["start"].astype(str) + "_" + LOCI["end"].astype(str)).tolist()

# create all combinations of chromosomes
CHR_PAIRS = ["{}-{}".format(i, j) for i, j in itertools.combinations(CHRS, 2)]
COOL_DIR = path.join("..", "2019-06-18_PCa-LowC-sequencing", "Contacts")

wildcard_constraints:
    chrom = "chr[MXY0-9]+",
    chrom_pair = "chr[MXY0-9]+-chr[MXY0-9]+",
    sample = "PCa[0-9]+",
    locus = "chr[XY0-9]+:\d+-\d+",
    ext = "(png|pdf)",

# ==============================================================================
# Rules
# ==============================================================================
rule all:
    input:
        #expand(
        #    path.join("Plots", "cis", "{sample}.40000.{chrom}.png"),
        #    sample=SAMPLES,
        #    chrom=CHRS
        #),
        #expand(
        #    path.join("Plots", "trans", "{sample}.40000.{chrom_pair}.png"),
        #    sample=SAMPLES,
        #    chrom_pair=CHR_PAIRS
        #),
        expand(
            path.join("Plots", "locus", "{sample}.{locus}.{ext}"),
            locus=LOCI_STR,
            sample=SAMPLES,
            ext=["png", "pdf"],
        ),

rule plot_mtx_cis:
    input:
        path.join(COOL_DIR, "{sample}.mcool")
    output:
        path.join("Plots", "cis", "{sample}.{res}.{chrom}.png")
    shell:
        "cooler show -b -o {output} --dpi 300 {input}::/resolutions/{wildcards.res} {wildcards.chrom}"

rule plot_mtx_trans:
    input:
        path.join(COOL_DIR, "{sample}.mcool"),
    output:
        path.join("Plots", "trans", "{sample}.{res}.{chrom1}-{chrom2}.png"),
    shell:
        "cooler show -b -o {output} --dpi 300 -r2 {wildcards.chrom2} {input}::/resolutions/{wildcards.res} {wildcards.chrom1}"

rule plot_locus:
    input:
        path.join(COOL_DIR, "{sample}.mcool"),
    output:
        path.join("Plots", "locus", "{sample}.{chr}_{start}_{end}.{ext}"),
    params:
        res = lambda wildcards: LOCI.loc[(LOCI["chr"].astype(str) == wildcards.chr) & (LOCI["start"].astype(str) == wildcards.start) & (LOCI["end"].astype(str) == wildcards.end), "res"].values[0],
        zmin = lambda wildcards: LOCI.loc[(LOCI["chr"].astype(str) == wildcards.chr) & (LOCI["start"].astype(str) == wildcards.start) & (LOCI["end"].astype(str) == wildcards.end), "zmin"].values[0],
        zmax = lambda wildcards: LOCI.loc[(LOCI["chr"].astype(str) == wildcards.chr) & (LOCI["start"].astype(str) == wildcards.start) & (LOCI["end"].astype(str) == wildcards.end), "zmax"].values[0],
        cmap = "bwr"
    shell:
        "cooler show -b -o {output} --cmap {params.cmap} --dpi 300 --zmin {params.zmin} --zmax {params.zmax} {input}::/resolutions/{params.res} {wildcards.chr}:{wildcards.start}-{wildcards.end}"

