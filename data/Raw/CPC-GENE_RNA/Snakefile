# ========================================================================================
# Configuration
# ========================================================================================
import pandas as pd
import os.path as path
import numpy as np

CONFIG = pd.read_csv("config.tsv", sep="\t", index_col=False)
SAMPLES = np.unique(CONFIG["SampleID"].tolist())

REPORT_DIR = "Reports"
FASTQ_DIR = "FASTQs"
ALIGN_DIR = "Aligned"

# ========================================================================================
# Functions
# ========================================================================================
def get_files(wildcards):
    return {"fastq": CONFIG.loc[CONFIG.SampleID == wildcards.sample, "Path"].tolist()}

# ========================================================================================
# Meta Rules
# ========================================================================================
rule all:
    input:
        expand(
            path.join(REPORT_DIR, "{file}_fastqc.{ext}"),
            file=[f[:-9] for f in CONFIG["Path"]],
            ext=["html", "zip"],
        ),
        expand(
            path.join(ALIGN_DIR, "{sample}", "{file}"),
            sample=SAMPLES,
            file=["abundance.h5", "abundance.tsv", "pseudoalignments.bam"],
        ),

# ========================================================================================
# Rules
# ========================================================================================
rule fastqc:
    input:
        "{file}.fastq.gz",
    output:
        path.join(REPORT_DIR, "{file}_fastqc.html"),
        path.join(REPORT_DIR, "{file}_fastqc.zip"),
    shell:
        "fastqc -o {REPORT_DIR} {input}"

rule kallisto_quant:
    input:
        unpack(get_files),
        index = path.join("..", "Kallisto_GRCh38_Index", "transcriptome.idx"),
    output:
        expand(
            path.join(ALIGN_DIR, "{{sample}}", "{file}"),
            file=["abundance.h5", "abundance.tsv", "pseudoalignments.bam"],
        ),
    params:
        "-b 100 -p -t 8 --verbose"
    shell:
        "kallisto quant {params} -i {input.index} -o {ALIGN_DIR}/{wildcards.sample} {input.fastq}"


