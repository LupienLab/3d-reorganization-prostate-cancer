# ==============================================================================
# Environment
# ==============================================================================
import pandas as pd
import os.path as path

DIR = {
	"mtx": path.join(
		"..", "..", "data", "Processed", "2019-06-18_PCa-LowC-sequencing",
		"Contacts"
	),
	"res": path.join("..", "..", "results", "2021-06-30_hicrep"),
}
DIR["plot"] = path.join(DIR["res"], "Plots")

CONFIG = pd.read_csv(
	"config.tsv",
	sep = "\t",
)
CONFIG = CONFIG.loc[(CONFIG.Include == "Yes") & (CONFIG.Source == "Primary"), :]
SAMPLES = CONFIG["SampleID"].tolist()

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
	input:
		expand(
			path.join(DIR["res"], "{sample1}.{sample2}.scc.txt"),
			sample1 = SAMPLES,
			sample2 = SAMPLES,
		),
		path.join(DIR["res"], "scc.tsv"),
		path.join(DIR["plot"], "scc.heatmap.png"),

# ==============================================================================
# Rules
# ==============================================================================
rule scc:
	input:
		cool1 = path.join(DIR["mtx"], "{sample1}.mcool"),
		cool2 = path.join(DIR["mtx"], "{sample2}.mcool"),
	output:
		path.join(DIR["res"], "{sample1}.{sample2}.scc.txt"),
	params:
		# subsample each file to 300 M contacts
		"-s 300000000"
	shell:
		"hicreppy scc {params} {input.cool1}::/resolutions/40000 {input.cool2}::/resolutions/40000 > {output}"

rule combine_scc:
	input:
		script = "combine-scc.R",
		data = expand(
			path.join(DIR["res"], "{sample1}.{sample2}.scc.txt"),
			sample1 = SAMPLES,
			sample2 = SAMPLES,
		),
	output:
		path.join(DIR["res"], "scc.tsv"),
	shell:
		"Rscript {input.script}"

rule plot_scc:
	input:
		script = "plot-scc.R",
		data = path.join(DIR["res"], "scc.tsv"),
	output:
		path.join(DIR["plot"], "scc.heatmap.png"),
	shell:
		"Rscript {input.script}"

